
LM35 TEMPERATURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029bc  080029bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000053af  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001186  00000000  00000000  000253eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  00026578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000480  00000000  00000000  00026a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e552  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f58  00000000  00000000  00045462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bde25  00000000  00000000  0004b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001091df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001430  00000000  00000000  00109230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002980 	.word	0x08002980

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002980 	.word	0x08002980

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 fb9d 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f83d 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 f8eb 	bl	8000d20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b4a:	f000 f897 	bl	8000c7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCDinit();
 8000b4e:	f000 f971 	bl	8000e34 <LCDinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	      HAL_ADC_Start(&hadc1);
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <main+0x80>)
 8000b54:	f000 fc6c 	bl	8001430 <HAL_ADC_Start>
	 	  HAL_ADC_PollForConversion(&hadc1,500);
 8000b58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <main+0x80>)
 8000b5e:	f000 fd6c 	bl	800163a <HAL_ADC_PollForConversion>
	 	  Value = HAL_ADC_GetValue(&hadc1);
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <main+0x80>)
 8000b64:	f000 fdf4 	bl	8001750 <HAL_ADC_GetValue>
 8000b68:	6078      	str	r0, [r7, #4]
	 	  HAL_ADC_Stop(&hadc1);
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <main+0x80>)
 8000b6c:	f000 fd32 	bl	80015d4 <HAL_ADC_Stop>
	 	  // float Temp =(Value/4095.0)*3.3*100.0;
	 	  float Temp= Value*0.0008;
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fd95 	bl	80006a0 <__aeabi_ui2d>
 8000b76:	a30e      	add	r3, pc, #56	; (adr r3, 8000bb0 <main+0x78>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	f7ff fb24 	bl	80001c8 <__aeabi_dmul>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff fe04 	bl	8000794 <__aeabi_d2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	603b      	str	r3, [r7, #0]
	 	  cmd(0x80);
 8000b90:	2080      	movs	r0, #128	; 0x80
 8000b92:	f000 f95d 	bl	8000e50 <cmd>
	 	  input("TEMP IN F:");
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <main+0x84>)
 8000b98:	f000 f9ca 	bl	8000f30 <input>
	 	  Numericdata(Temp);
 8000b9c:	edd7 7a00 	vldr	s15, [r7]
 8000ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba4:	ee17 0a90 	vmov	r0, s15
 8000ba8:	f000 fa4a 	bl	8001040 <Numericdata>
  {
 8000bac:	e7d1      	b.n	8000b52 <main+0x1a>
 8000bae:	bf00      	nop
 8000bb0:	eb1c432d 	.word	0xeb1c432d
 8000bb4:	3f4a36e2 	.word	0x3f4a36e2
 8000bb8:	20000028 	.word	0x20000028
 8000bbc:	08002998 	.word	0x08002998

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2230      	movs	r2, #48	; 0x30
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fece 	bl	8002970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xb4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xb4>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xb4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <SystemClock_Config+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <SystemClock_Config+0xb8>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <SystemClock_Config+0xb8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fa55 	bl	80020e0 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c3c:	f000 fa46 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fcb8 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c66:	f000 fa31 	bl	80010cc <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MX_ADC1_Init+0x9c>)
 8000c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_ADC1_Init+0xa0>)
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cdc:	f000 fb64 	bl	80013a8 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f9f1 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cea:	230c      	movs	r3, #12
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cfc:	f000 fd36 	bl	800176c <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 f9e1 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000028 	.word	0x20000028
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a39      	ldr	r2, [pc, #228]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a32      	ldr	r2, [pc, #200]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a2b      	ldr	r2, [pc, #172]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_GPIO_Init+0x104>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2103      	movs	r1, #3
 8000daa:	481f      	ldr	r0, [pc, #124]	; (8000e28 <MX_GPIO_Init+0x108>)
 8000dac:	f001 f97e 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2130      	movs	r1, #48	; 0x30
 8000db4:	481d      	ldr	r0, [pc, #116]	; (8000e2c <MX_GPIO_Init+0x10c>)
 8000db6:	f001 f979 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000dc0:	481b      	ldr	r0, [pc, #108]	; (8000e30 <MX_GPIO_Init+0x110>)
 8000dc2:	f001 f973 	bl	80020ac <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x108>)
 8000dde:	f000 ffc9 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
 8000de2:	2330      	movs	r3, #48	; 0x30
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0x10c>)
 8000dfa:	f000 ffbb 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000dfe:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000e02:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <MX_GPIO_Init+0x110>)
 8000e18:	f000 ffac 	bl	8001d74 <HAL_GPIO_Init>

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020400 	.word	0x40020400

08000e34 <LCDinit>:

/* USER CODE BEGIN 4 */
void LCDinit()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

	cmd(0x01);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 f809 	bl	8000e50 <cmd>
	cmd(0x38);
 8000e3e:	2038      	movs	r0, #56	; 0x38
 8000e40:	f000 f806 	bl	8000e50 <cmd>
	cmd(0x0E);
 8000e44:	200e      	movs	r0, #14
 8000e46:	f000 f803 	bl	8000e50 <cmd>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <cmd>:
void cmd(unsigned char y)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOA, RS_Pin,0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4831      	ldr	r0, [pc, #196]	; (8000f24 <cmd+0xd4>)
 8000e60:	f001 f924 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D7_Pin,(y & 0x80));
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	482d      	ldr	r0, [pc, #180]	; (8000f28 <cmd+0xd8>)
 8000e74:	f001 f91a 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D6_Pin,(y & 0x40));
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e86:	4828      	ldr	r0, [pc, #160]	; (8000f28 <cmd+0xd8>)
 8000e88:	f001 f910 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D5_Pin,(y & 0x20));
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	4823      	ldr	r0, [pc, #140]	; (8000f28 <cmd+0xd8>)
 8000e9c:	f001 f906 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D4_Pin,(y & 0x10));
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <cmd+0xd8>)
 8000eb0:	f001 f8fc 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D3_Pin,(y & 0x08));
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4819      	ldr	r0, [pc, #100]	; (8000f28 <cmd+0xd8>)
 8000ec2:	f001 f8f3 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D2_Pin,(y & 0x04));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <cmd+0xd8>)
 8000ed4:	f001 f8ea 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, D1_Pin,(y & 0x02));
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <cmd+0xdc>)
 8000ee6:	f001 f8e1 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, D0_Pin,(y & 0x01));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <cmd+0xdc>)
 8000ef8:	f001 f8d8 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, EN_Pin,1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2102      	movs	r1, #2
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <cmd+0xd4>)
 8000f02:	f001 f8d3 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000f06:	2014      	movs	r0, #20
 8000f08:	f000 fa2a 	bl	8001360 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, EN_Pin,0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <cmd+0xd4>)
 8000f12:	f001 f8cb 	bl	80020ac <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000f16:	2014      	movs	r0, #20
 8000f18:	f000 fa22 	bl	8001360 <HAL_Delay>

}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800

08000f30 <input>:
void input(unsigned char *x)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	while(*x)
 8000f38:	e009      	b.n	8000f4e <input+0x1e>
	{
		Data(*x++);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f80c 	bl	8000f60 <Data>
		HAL_Delay(20);
 8000f48:	2014      	movs	r0, #20
 8000f4a:	f000 fa09 	bl	8001360 <HAL_Delay>
	while(*x)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f1      	bne.n	8000f3a <input+0xa>
	}
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Data>:
void Data(unsigned char z)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	     HAL_GPIO_WritePin(GPIOA, RS_Pin,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4831      	ldr	r0, [pc, #196]	; (8001034 <Data+0xd4>)
 8000f70:	f001 f89c 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D7_Pin,(z & 0x80));
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	482d      	ldr	r0, [pc, #180]	; (8001038 <Data+0xd8>)
 8000f84:	f001 f892 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D6_Pin,(z & 0x40));
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f96:	4828      	ldr	r0, [pc, #160]	; (8001038 <Data+0xd8>)
 8000f98:	f001 f888 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D5_Pin,(z & 0x20));
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <Data+0xd8>)
 8000fac:	f001 f87e 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D4_Pin,(z & 0x10));
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <Data+0xd8>)
 8000fc0:	f001 f874 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D3_Pin,(z & 0x08));
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <Data+0xd8>)
 8000fd2:	f001 f86b 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D2_Pin,(z & 0x04));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <Data+0xd8>)
 8000fe4:	f001 f862 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, D1_Pin,(z & 0x02));
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <Data+0xdc>)
 8000ff6:	f001 f859 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, D0_Pin,(z & 0x01));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	2110      	movs	r1, #16
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <Data+0xdc>)
 8001008:	f001 f850 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, EN_Pin,1);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <Data+0xd4>)
 8001012:	f001 f84b 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_Delay(20);
 8001016:	2014      	movs	r0, #20
 8001018:	f000 f9a2 	bl	8001360 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOA, EN_Pin,0);
 800101c:	2200      	movs	r2, #0
 800101e:	2102      	movs	r1, #2
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <Data+0xd4>)
 8001022:	f001 f843 	bl	80020ac <HAL_GPIO_WritePin>
		 HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f000 f99a 	bl	8001360 <HAL_Delay>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800

08001040 <Numericdata>:
void Numericdata(unsigned int a)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	Data(((a%1000)/100)+0x30);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <Numericdata+0x80>)
 800104c:	fba3 1302 	umull	r1, r3, r3, r2
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001056:	fb01 f303 	mul.w	r3, r1, r3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <Numericdata+0x84>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	b2db      	uxtb	r3, r3
 8001066:	3330      	adds	r3, #48	; 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff78 	bl	8000f60 <Data>
	Data(((a%100)/10)+0x30);
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <Numericdata+0x84>)
 8001074:	fba3 1302 	umull	r1, r3, r3, r2
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	2164      	movs	r1, #100	; 0x64
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <Numericdata+0x88>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3330      	adds	r3, #48	; 0x30
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff65 	bl	8000f60 <Data>
	Data(((a%10))+0x30);
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <Numericdata+0x88>)
 800109a:	fba3 2301 	umull	r2, r3, r3, r1
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	1aca      	subs	r2, r1, r3
 80010aa:	b2d3      	uxtb	r3, r2
 80010ac:	3330      	adds	r3, #48	; 0x30
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff55 	bl	8000f60 <Data>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	10624dd3 	.word	0x10624dd3
 80010c4:	51eb851f 	.word	0x51eb851f
 80010c8:	cccccccd 	.word	0xcccccccd

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_MspInit+0x4c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_MspInit+0x4c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_ADC_MspInit+0x7c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d127      	bne.n	800119a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_ADC_MspInit+0x80>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001182:	2304      	movs	r3, #4
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_ADC_MspInit+0x84>)
 8001196:	f000 fded 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012000 	.word	0x40012000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 f890 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

	  ldr   sp, =_estack     /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd7 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f001 fb67 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fc6d 	bl	8000b38 <main>
  bx  lr    
 800125e:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800126c:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8001270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001274:	20000074 	.word	0x20000074

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 fd31 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff ff12 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fd3b 	bl	8001d5a <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 fd11 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000070 	.word	0x20000070

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000070 	.word	0x20000070

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e033      	b.n	8001426 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff feae 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ee:	f023 0302 	bic.w	r3, r3, #2
 80013f2:	f043 0202 	orr.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fad8 	bl	80019b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
 8001416:	e001      	b.n	800141c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADC_Start+0x1a>
 8001446:	2302      	movs	r3, #2
 8001448:	e0b2      	b.n	80015b0 <HAL_ADC_Start+0x180>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d018      	beq.n	8001492 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001470:	4b52      	ldr	r3, [pc, #328]	; (80015bc <HAL_ADC_Start+0x18c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_ADC_Start+0x190>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9a      	lsrs	r2, r3, #18
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001484:	e002      	b.n	800148c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3b01      	subs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f9      	bne.n	8001486 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d17a      	bne.n	8001596 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014de:	d106      	bne.n	80014ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f023 0206 	bic.w	r2, r3, #6
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_ADC_Start+0x194>)
 80014fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001508:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d12a      	bne.n	800156c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <HAL_ADC_Start+0x198>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d015      	beq.n	800154c <HAL_ADC_Start+0x11c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a29      	ldr	r2, [pc, #164]	; (80015cc <HAL_ADC_Start+0x19c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d105      	bne.n	8001536 <HAL_ADC_Start+0x106>
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_ADC_Start+0x194>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_ADC_Start+0x1a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d136      	bne.n	80015ae <HAL_ADC_Start+0x17e>
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_ADC_Start+0x194>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d130      	bne.n	80015ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d129      	bne.n	80015ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	e020      	b.n	80015ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <HAL_ADC_Start+0x198>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11b      	bne.n	80015ae <HAL_ADC_Start+0x17e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d114      	bne.n	80015ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e00b      	b.n	80015ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f043 0210 	orr.w	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20000000 	.word	0x20000000
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	40012300 	.word	0x40012300
 80015c8:	40012000 	.word	0x40012000
 80015cc:	40012100 	.word	0x40012100
 80015d0:	40012200 	.word	0x40012200

080015d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Stop+0x16>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e021      	b.n	800162e <HAL_ADC_Stop+0x5a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001656:	d113      	bne.n	8001680 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001666:	d10b      	bne.n	8001680 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e063      	b.n	8001748 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001680:	f7ff fe62 	bl	8001348 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001686:	e021      	b.n	80016cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168e:	d01d      	beq.n	80016cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x6c>
 8001696:	f7ff fe57 	bl	8001348 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d212      	bcs.n	80016cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d00b      	beq.n	80016cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f043 0204 	orr.w	r2, r3, #4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03d      	b.n	8001748 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1d6      	bne.n	8001688 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f06f 0212 	mvn.w	r2, #18
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d123      	bne.n	8001746 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11f      	bne.n	8001746 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800171e:	2b00      	cmp	r3, #0
 8001720:	d111      	bne.n	8001746 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1c>
 8001784:	2302      	movs	r3, #2
 8001786:	e105      	b.n	8001994 <HAL_ADC_ConfigChannel+0x228>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d925      	bls.n	80017e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68d9      	ldr	r1, [r3, #12]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	3b1e      	subs	r3, #30
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43da      	mvns	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	400a      	ands	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4403      	add	r3, r0
 80017d6:	3b1e      	subs	r3, #30
 80017d8:	409a      	lsls	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	e022      	b.n	800182a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	2207      	movs	r2, #7
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6919      	ldr	r1, [r3, #16]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	4603      	mov	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4403      	add	r3, r0
 8001820:	409a      	lsls	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b06      	cmp	r3, #6
 8001830:	d824      	bhi.n	800187c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b05      	subs	r3, #5
 8001844:	221f      	movs	r2, #31
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	400a      	ands	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b05      	subs	r3, #5
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
 800187a:	e04c      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d824      	bhi.n	80018ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b23      	subs	r3, #35	; 0x23
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43da      	mvns	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b23      	subs	r3, #35	; 0x23
 80018c0:	fa00 f203 	lsl.w	r2, r0, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
 80018cc:	e023      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b41      	subs	r3, #65	; 0x41
 80018e0:	221f      	movs	r2, #31
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_ADC_ConfigChannel+0x234>)
 8001918:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_ADC_ConfigChannel+0x238>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d109      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1cc>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d105      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_ADC_ConfigChannel+0x238>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d123      	bne.n	800198a <HAL_ADC_ConfigChannel+0x21e>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d003      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x1e6>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b11      	cmp	r3, #17
 8001950:	d11b      	bne.n	800198a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b10      	cmp	r3, #16
 8001964:	d111      	bne.n	800198a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_ADC_ConfigChannel+0x240>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9a      	lsrs	r2, r3, #18
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012300 	.word	0x40012300
 80019a4:	40012000 	.word	0x40012000
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83

080019b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b8:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <ADC_Init+0x1f0>)
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	021a      	lsls	r2, r3, #8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <ADC_Init+0x1f4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e00f      	b.n	8001aae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0202 	bic.w	r2, r2, #2
 8001abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
 8001ac8:	005a      	lsls	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	3b01      	subs	r3, #1
 8001b08:	035a      	lsls	r2, r3, #13
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	e007      	b.n	8001b24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	051a      	lsls	r2, r3, #20
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b66:	025a      	lsls	r2, r3, #9
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	029a      	lsls	r2, r3, #10
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff47 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff5c 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffb0 	bl	8001cc8 <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e16b      	b.n	8002068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 815a 	bne.w	8002062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80b4 	beq.w	8002062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b60      	ldr	r3, [pc, #384]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <HAL_GPIO_Init+0x30c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_GPIO_Init+0x310>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x314>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02b      	beq.n	8001f9a <HAL_GPIO_Init+0x226>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_GPIO_Init+0x318>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d025      	beq.n	8001f96 <HAL_GPIO_Init+0x222>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_GPIO_Init+0x31c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <HAL_GPIO_Init+0x21e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4f      	ldr	r2, [pc, #316]	; (8002094 <HAL_GPIO_Init+0x320>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d019      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_GPIO_Init+0x324>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_GPIO_Init+0x216>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_GPIO_Init+0x328>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00d      	beq.n	8001f86 <HAL_GPIO_Init+0x212>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x32c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <HAL_GPIO_Init+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <HAL_GPIO_Init+0x330>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_GPIO_Init+0x20a>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e00e      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f7e:	2308      	movs	r3, #8
 8001f80:	e00c      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f82:	2306      	movs	r3, #6
 8001f84:	e00a      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f86:	2305      	movs	r3, #5
 8001f88:	e008      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e004      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x228>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f002 0203 	and.w	r2, r2, #3
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x310>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fde:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_GPIO_Init+0x334>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_GPIO_Init+0x334>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3301      	adds	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	f67f ae90 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40013800 	.word	0x40013800
 8002088:	40020000 	.word	0x40020000
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000
 800209c:	40021400 	.word	0x40021400
 80020a0:	40021800 	.word	0x40021800
 80020a4:	40021c00 	.word	0x40021c00
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e267      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d075      	beq.n	80021ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d112      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d157      	bne.n	80021e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e242      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x74>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f8d6 	bl	8001348 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f8d2 	bl	8001348 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e207      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f8c2 	bl	8001348 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff f8be 	bl	8001348 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f3      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0xe8>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1c7      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7ff f877 	bl	8001348 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff f873 	bl	8001348 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1a8      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4925      	ldr	r1, [pc, #148]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff f856 	bl	8001348 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff f852 	bl	8001348 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e187      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d036      	beq.n	8002338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff f836 	bl	8001348 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff f832 	bl	8001348 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e167      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x200>
 80022fe:	e01b      	b.n	8002338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff f81f 	bl	8001348 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	e00e      	b.n	800232c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7ff f81b 	bl	8001348 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d907      	bls.n	800232c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e150      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ea      	bne.n	800230e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8097 	beq.w	8002474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe ffdb 	bl	8001348 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe ffd7 	bl	8001348 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e10c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x2ea>
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x30c>
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5e      	ldr	r2, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe ff9c 	bl	8001348 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe ff98 	bl	8001348 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0cb      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ee      	beq.n	8002414 <HAL_RCC_OscConfig+0x334>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe ff86 	bl	8001348 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe ff82 	bl	8001348 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0b5      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ee      	bne.n	8002440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a1 	beq.w	80025c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d05c      	beq.n	8002544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d141      	bne.n	8002516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe ff56 	bl	8001348 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe ff52 	bl	8001348 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e087      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe ff2b 	bl	8001348 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe ff27 	bl	8001348 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e05c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x416>
 8002514:	e054      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe ff14 	bl	8001348 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe ff10 	bl	8001348 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e045      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e038      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000
 8002558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4ec>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d028      	beq.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d121      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11a      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0cc      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90c      	bls.n	800260c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d044      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d119      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e067      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fe42 	bl	8001348 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fe3e 	bl	8001348 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fda2 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00
 800278c:	40023800 	.word	0x40023800
 8002790:	080029a4 	.word	0x080029a4
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b090      	sub	sp, #64	; 0x40
 80027a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b4:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d00d      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	f200 80a1 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x16c>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_GetSysClockFreq+0x184>)
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027d4:	e09b      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027da:	e098      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	627a      	str	r2, [r7, #36]	; 0x24
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002804:	2100      	movs	r1, #0
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 8002808:	fb03 f201 	mul.w	r2, r3, r1
 800280c:	2300      	movs	r3, #0
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	4413      	add	r3, r2
 8002814:	4a43      	ldr	r2, [pc, #268]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 8002816:	fba0 1202 	umull	r1, r2, r0, r2
 800281a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281c:	460a      	mov	r2, r1
 800281e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	4413      	add	r3, r2
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	61fa      	str	r2, [r7, #28]
 800282e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002836:	f7fd fffd 	bl	8000834 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4613      	mov	r3, r2
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	e053      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	617a      	str	r2, [r7, #20]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002856:	f04f 0b00 	mov.w	fp, #0
 800285a:	4652      	mov	r2, sl
 800285c:	465b      	mov	r3, fp
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	ebb2 080a 	subs.w	r8, r2, sl
 8002876:	eb63 090b 	sbc.w	r9, r3, fp
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800288a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800288e:	ebb2 0408 	subs.w	r4, r2, r8
 8002892:	eb63 0509 	sbc.w	r5, r3, r9
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	00eb      	lsls	r3, r5, #3
 80028a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a4:	00e2      	lsls	r2, r4, #3
 80028a6:	4614      	mov	r4, r2
 80028a8:	461d      	mov	r5, r3
 80028aa:	eb14 030a 	adds.w	r3, r4, sl
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	eb45 030b 	adc.w	r3, r5, fp
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c2:	4629      	mov	r1, r5
 80028c4:	028b      	lsls	r3, r1, #10
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028cc:	4621      	mov	r1, r4
 80028ce:	028a      	lsls	r2, r1, #10
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	2200      	movs	r2, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e0:	f7fd ffa8 	bl	8000834 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetSysClockFreq+0x184>)
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002910:	4618      	mov	r0, r3
 8002912:	3740      	adds	r7, #64	; 0x40
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	00f42400 	.word	0x00f42400
 8002924:	017d7840 	.word	0x017d7840

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4d0d      	ldr	r5, [pc, #52]	; (8002960 <__libc_init_array+0x38>)
 800292c:	4c0d      	ldr	r4, [pc, #52]	; (8002964 <__libc_init_array+0x3c>)
 800292e:	1b64      	subs	r4, r4, r5
 8002930:	10a4      	asrs	r4, r4, #2
 8002932:	2600      	movs	r6, #0
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	4d0b      	ldr	r5, [pc, #44]	; (8002968 <__libc_init_array+0x40>)
 800293a:	4c0c      	ldr	r4, [pc, #48]	; (800296c <__libc_init_array+0x44>)
 800293c:	f000 f820 	bl	8002980 <_init>
 8002940:	1b64      	subs	r4, r4, r5
 8002942:	10a4      	asrs	r4, r4, #2
 8002944:	2600      	movs	r6, #0
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080029bc 	.word	0x080029bc
 8002964:	080029bc 	.word	0x080029bc
 8002968:	080029bc 	.word	0x080029bc
 800296c:	080029c0 	.word	0x080029c0

08002970 <memset>:
 8002970:	4402      	add	r2, r0
 8002972:	4603      	mov	r3, r0
 8002974:	4293      	cmp	r3, r2
 8002976:	d100      	bne.n	800297a <memset+0xa>
 8002978:	4770      	bx	lr
 800297a:	f803 1b01 	strb.w	r1, [r3], #1
 800297e:	e7f9      	b.n	8002974 <memset+0x4>

08002980 <_init>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr

0800298c <_fini>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr
