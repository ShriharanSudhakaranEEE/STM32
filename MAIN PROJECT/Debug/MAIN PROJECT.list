
MAIN PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b88  08005b88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b90  08005b90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000520  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aad7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce7  00000000  00000000  0002ab7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d8  00000000  00000000  0002d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203ff  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca78  00000000  00000000  0004dee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5263  00000000  00000000  0005a95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fbc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c34  00000000  00000000  0011fc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d34 	.word	0x08004d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004d34 	.word	0x08004d34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <LCDinit>:

void LCDinit()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

	cmd(0x01);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 f809 	bl	8000d6c <cmd>
	cmd(0x38);
 8000d5a:	2038      	movs	r0, #56	; 0x38
 8000d5c:	f000 f806 	bl	8000d6c <cmd>
	cmd(0x0E);
 8000d60:	200e      	movs	r0, #14
 8000d62:	f000 f803 	bl	8000d6c <cmd>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <cmd>:
void cmd(unsigned char y)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOA, RS_Pin,0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4831      	ldr	r0, [pc, #196]	; (8000e40 <cmd+0xd4>)
 8000d7c:	f002 f962 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D7_Pin,(y & 0x80));
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	482d      	ldr	r0, [pc, #180]	; (8000e44 <cmd+0xd8>)
 8000d90:	f002 f958 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D6_Pin,(y & 0x40));
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da2:	4828      	ldr	r0, [pc, #160]	; (8000e44 <cmd+0xd8>)
 8000da4:	f002 f94e 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D5_Pin,(y & 0x20));
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 0320 	and.w	r3, r3, #32
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db6:	4823      	ldr	r0, [pc, #140]	; (8000e44 <cmd+0xd8>)
 8000db8:	f002 f944 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D4_Pin,(y & 0x10));
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <cmd+0xd8>)
 8000dcc:	f002 f93a 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D3_Pin,(y & 0x08));
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <cmd+0xd8>)
 8000dde:	f002 f931 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, D2_Pin,(y & 0x04));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	2101      	movs	r1, #1
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <cmd+0xd8>)
 8000df0:	f002 f928 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, D1_Pin,(y & 0x02));
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2120      	movs	r1, #32
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <cmd+0xdc>)
 8000e02:	f002 f91f 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, D0_Pin,(y & 0x01));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2110      	movs	r1, #16
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <cmd+0xdc>)
 8000e14:	f002 f916 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, EN_Pin,1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <cmd+0xd4>)
 8000e1e:	f002 f911 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000e22:	2014      	movs	r0, #20
 8000e24:	f001 f8ec 	bl	8002000 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, EN_Pin,0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <cmd+0xd4>)
 8000e2e:	f002 f909 	bl	8003044 <HAL_GPIO_WritePin>
	 HAL_Delay(20);
 8000e32:	2014      	movs	r0, #20
 8000e34:	f001 f8e4 	bl	8002000 <HAL_Delay>

}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800

08000e4c <input>:
void input(unsigned char *x)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	while(*x)
 8000e54:	e009      	b.n	8000e6a <input+0x1e>
	{
		Data(*x++);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f80c 	bl	8000e7c <Data>
		HAL_Delay(20);
 8000e64:	2014      	movs	r0, #20
 8000e66:	f001 f8cb 	bl	8002000 <HAL_Delay>
	while(*x)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f1      	bne.n	8000e56 <input+0xa>
	}
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <Data>:
void Data(unsigned char z)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	     HAL_GPIO_WritePin(GPIOA, RS_Pin,1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4831      	ldr	r0, [pc, #196]	; (8000f50 <Data+0xd4>)
 8000e8c:	f002 f8da 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D7_Pin,(z & 0x80));
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	482d      	ldr	r0, [pc, #180]	; (8000f54 <Data+0xd8>)
 8000ea0:	f002 f8d0 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D6_Pin,(z & 0x40));
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb2:	4828      	ldr	r0, [pc, #160]	; (8000f54 <Data+0xd8>)
 8000eb4:	f002 f8c6 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D5_Pin,(z & 0x20));
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <Data+0xd8>)
 8000ec8:	f002 f8bc 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D4_Pin,(z & 0x10));
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <Data+0xd8>)
 8000edc:	f002 f8b2 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D3_Pin,(z & 0x08));
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2102      	movs	r1, #2
 8000eec:	4819      	ldr	r0, [pc, #100]	; (8000f54 <Data+0xd8>)
 8000eee:	f002 f8a9 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, D2_Pin,(z & 0x04));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	2101      	movs	r1, #1
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <Data+0xd8>)
 8000f00:	f002 f8a0 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, D1_Pin,(z & 0x02));
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <Data+0xdc>)
 8000f12:	f002 f897 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, D0_Pin,(z & 0x01));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2110      	movs	r1, #16
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <Data+0xdc>)
 8000f24:	f002 f88e 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, EN_Pin,1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <Data+0xd4>)
 8000f2e:	f002 f889 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_Delay(20);
 8000f32:	2014      	movs	r0, #20
 8000f34:	f001 f864 	bl	8002000 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOA, EN_Pin,0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <Data+0xd4>)
 8000f3e:	f002 f881 	bl	8003044 <HAL_GPIO_WritePin>
		 HAL_Delay(20);
 8000f42:	2014      	movs	r0, #20
 8000f44:	f001 f85c 	bl	8002000 <HAL_Delay>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800

08000f5c <Numericdata>:
void Numericdata(unsigned int a)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	Data(((a%1000)/100)+0x30);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <Numericdata+0x80>)
 8000f68:	fba3 1302 	umull	r1, r3, r3, r2
 8000f6c:	099b      	lsrs	r3, r3, #6
 8000f6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f72:	fb01 f303 	mul.w	r3, r1, r3
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <Numericdata+0x84>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3330      	adds	r3, #48	; 0x30
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff78 	bl	8000e7c <Data>
	Data(((a%100)/10)+0x30);
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <Numericdata+0x84>)
 8000f90:	fba3 1302 	umull	r1, r3, r3, r2
 8000f94:	095b      	lsrs	r3, r3, #5
 8000f96:	2164      	movs	r1, #100	; 0x64
 8000f98:	fb01 f303 	mul.w	r3, r1, r3
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <Numericdata+0x88>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3330      	adds	r3, #48	; 0x30
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff65 	bl	8000e7c <Data>
	Data(((a%10))+0x30);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <Numericdata+0x88>)
 8000fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	1aca      	subs	r2, r1, r3
 8000fc6:	b2d3      	uxtb	r3, r2
 8000fc8:	3330      	adds	r3, #48	; 0x30
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff55 	bl	8000e7c <Data>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	10624dd3 	.word	0x10624dd3
 8000fe0:	51eb851f 	.word	0x51eb851f
 8000fe4:	cccccccd 	.word	0xcccccccd

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 ff95 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f957 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fa85 	bl	8001504 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f9b1 	bl	8001360 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ffe:	f000 fa01 	bl	8001404 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001002:	f000 fa51 	bl	80014a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCDinit();
 8001006:	f7ff fea3 	bl	8000d50 <LCDinit>
  unsigned int read1;
  unsigned int read2;
  unsigned int f;
  uint16_t adcValue;
  char displayString[20];
  int switchstate=0;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  int state=0;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  int flag=0;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  SSD1306_Init();
 8001016:	f000 fb23 	bl	8001660 <SSD1306_Init>
  cmd(0x80);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f7ff fea6 	bl	8000d6c <cmd>
  input("WELCOME");
 8001020:	488b      	ldr	r0, [pc, #556]	; (8001250 <main+0x268>)
 8001022:	f7ff ff13 	bl	8000e4c <input>
  HAL_Delay(1000);
 8001026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102a:	f000 ffe9 	bl	8002000 <HAL_Delay>
  cmd(0x01);
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff fe9c 	bl	8000d6c <cmd>
  HAL_GPIO_WritePin(GPIOA,LED_Pin,1);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4886      	ldr	r0, [pc, #536]	; (8001254 <main+0x26c>)
 800103c:	f002 f802 	bl	8003044 <HAL_GPIO_WritePin>
  cmd(0x80);
 8001040:	2080      	movs	r0, #128	; 0x80
 8001042:	f7ff fe93 	bl	8000d6c <cmd>
  input("SEATBELT UNLOCK");
 8001046:	4884      	ldr	r0, [pc, #528]	; (8001258 <main+0x270>)
 8001048:	f7ff ff00 	bl	8000e4c <input>
  while (1)
  {

	  /* Seat Belt*/

	  if(HAL_GPIO_ReadPin(GPIOB,SW1_Pin)==0)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4883      	ldr	r0, [pc, #524]	; (800125c <main+0x274>)
 8001050:	f001 ffe0 	bl	8003014 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d115      	bne.n	8001086 <main+0x9e>
	  {
		          cmd(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fe86 	bl	8000d6c <cmd>
	 		      HAL_GPIO_WritePin(GPIOA,LED_Pin,0);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	487b      	ldr	r0, [pc, #492]	; (8001254 <main+0x26c>)
 8001068:	f001 ffec 	bl	8003044 <HAL_GPIO_WritePin>
	 		      cmd(0x80);
 800106c:	2080      	movs	r0, #128	; 0x80
 800106e:	f7ff fe7d 	bl	8000d6c <cmd>
	 		      input("SEATBELT LOCK");
 8001072:	487b      	ldr	r0, [pc, #492]	; (8001260 <main+0x278>)
 8001074:	f7ff feea 	bl	8000e4c <input>
	 		      HAL_Delay(2000);
 8001078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800107c:	f000 ffc0 	bl	8002000 <HAL_Delay>
	 		      cmd(0x01 );
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff fe73 	bl	8000d6c <cmd>
	  }

     /* Temperature Sensor*/
	  if(HAL_GPIO_ReadPin(GPIOB,SW2_Pin)==0)
 8001086:	2108      	movs	r1, #8
 8001088:	4874      	ldr	r0, [pc, #464]	; (800125c <main+0x274>)
 800108a:	f001 ffc3 	bl	8003014 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <main+0xb0>
	  {
		  switchstate= 1;
 8001094:	2301      	movs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28

	 }

	  /*Speed control*/
	      if(switchstate==1)
 8001098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109a:	2b01      	cmp	r3, #1
 800109c:	f040 80bb 	bne.w	8001216 <main+0x22e>
	      {
	    	                      HAL_ADC_Start(&hadc1);
 80010a0:	4870      	ldr	r0, [pc, #448]	; (8001264 <main+0x27c>)
 80010a2:	f001 f815 	bl	80020d0 <HAL_ADC_Start>
	    	  	  	    	 	  HAL_ADC_PollForConversion(&hadc1,500);
 80010a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010aa:	486e      	ldr	r0, [pc, #440]	; (8001264 <main+0x27c>)
 80010ac:	f001 f915 	bl	80022da <HAL_ADC_PollForConversion>
	    	  	  	    	 	  read1=HAL_ADC_GetValue(&hadc1);
 80010b0:	486c      	ldr	r0, [pc, #432]	; (8001264 <main+0x27c>)
 80010b2:	f001 faad 	bl	8002610 <HAL_ADC_GetValue>
 80010b6:	61f8      	str	r0, [r7, #28]
	    	  	  	    	 	  HAL_ADC_Stop(&hadc1);
 80010b8:	486a      	ldr	r0, [pc, #424]	; (8001264 <main+0x27c>)
 80010ba:	f001 f8db 	bl	8002274 <HAL_ADC_Stop>
	    	  	  	    	 	  read2= (5.0 * read1* 1000.0) / 65536;
 80010be:	69f8      	ldr	r0, [r7, #28]
 80010c0:	f7ff fa18 	bl	80004f4 <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b67      	ldr	r3, [pc, #412]	; (8001268 <main+0x280>)
 80010ca:	f7ff fa8d 	bl	80005e8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b64      	ldr	r3, [pc, #400]	; (800126c <main+0x284>)
 80010dc:	f7ff fa84 	bl	80005e8 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b60      	ldr	r3, [pc, #384]	; (8001270 <main+0x288>)
 80010ee:	f7ff fba5 	bl	800083c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fc87 	bl	8000a0c <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
	    	  	  	    	 	  read2=100-read2;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001108:	61bb      	str	r3, [r7, #24]
	    	  	  	    	      cmd(0x80);
 800110a:	2080      	movs	r0, #128	; 0x80
 800110c:	f7ff fe2e 	bl	8000d6c <cmd>
	    	  	  	    	      input("ENGG TEMP:");
 8001110:	4858      	ldr	r0, [pc, #352]	; (8001274 <main+0x28c>)
 8001112:	f7ff fe9b 	bl	8000e4c <input>
	    	  	  	    	      Numericdata(read2);
 8001116:	69b8      	ldr	r0, [r7, #24]
 8001118:	f7ff ff20 	bl	8000f5c <Numericdata>
	    	  	  	    	 	  input("C");
 800111c:	4856      	ldr	r0, [pc, #344]	; (8001278 <main+0x290>)
 800111e:	f7ff fe95 	bl	8000e4c <input>
	    	  	  	    	 	  if(read2>55)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b37      	cmp	r3, #55	; 0x37
 8001126:	d905      	bls.n	8001134 <main+0x14c>
	    	  	  	    	 	  {
	    	  	  	    	 		  cmd(0xC0);
 8001128:	20c0      	movs	r0, #192	; 0xc0
 800112a:	f7ff fe1f 	bl	8000d6c <cmd>
	    	  	  	    	 		input("OVER TEMPERATURE");
 800112e:	4853      	ldr	r0, [pc, #332]	; (800127c <main+0x294>)
 8001130:	f7ff fe8c 	bl	8000e4c <input>
	    	  	  	    	 	  }
	    	  	  	    	 	 if(read2<55)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b36      	cmp	r3, #54	; 0x36
 8001138:	d805      	bhi.n	8001146 <main+0x15e>
	    	  	  	    	 		    	 	  {
	    	  	  	    	 		    	 		  cmd(0xC0);
 800113a:	20c0      	movs	r0, #192	; 0xc0
 800113c:	f7ff fe16 	bl	8000d6c <cmd>
	    	  	  	    	 		    	 		input("NORMAL TEMP");
 8001140:	484f      	ldr	r0, [pc, #316]	; (8001280 <main+0x298>)
 8001142:	f7ff fe83 	bl	8000e4c <input>
	    	  	  	    	 		    	 	  }
	    	  f=0;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	  	  	  	  HAL_ADC_Start(&hadc2);
 800114a:	484e      	ldr	r0, [pc, #312]	; (8001284 <main+0x29c>)
 800114c:	f000 ffc0 	bl	80020d0 <HAL_ADC_Start>
	    	  	  	  	  HAL_ADC_PollForConversion(&hadc2,500);
 8001150:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001154:	484b      	ldr	r0, [pc, #300]	; (8001284 <main+0x29c>)
 8001156:	f001 f8c0 	bl	80022da <HAL_ADC_PollForConversion>
	    	  	  	  	  adcValue=HAL_ADC_GetValue(&hadc2);
 800115a:	484a      	ldr	r0, [pc, #296]	; (8001284 <main+0x29c>)
 800115c:	f001 fa58 	bl	8002610 <HAL_ADC_GetValue>
 8001160:	4603      	mov	r3, r0
 8001162:	82fb      	strh	r3, [r7, #22]
	    	  	  	  	  HAL_ADC_Stop(&hadc2);
 8001164:	4847      	ldr	r0, [pc, #284]	; (8001284 <main+0x29c>)
 8001166:	f001 f885 	bl	8002274 <HAL_ADC_Stop>
	    	  	  	  	  // Convert ADC value to string
	    	  	  	  	  sprintf(displayString, "SPEED:%dKPH", (adcValue/41));
 800116a:	8afb      	ldrh	r3, [r7, #22]
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <main+0x2a0>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	463b      	mov	r3, r7
 800117a:	4944      	ldr	r1, [pc, #272]	; (800128c <main+0x2a4>)
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f96b 	bl	8004458 <siprintf>
	    	  	             // Display the string on the OLED display
	    	  	  	  	   // SSD1306_Clear()
	    	  	              SSD1306_GotoXY(0, 0);
 8001182:	2100      	movs	r1, #0
 8001184:	2000      	movs	r0, #0
 8001186:	f000 fbd5 	bl	8001934 <SSD1306_GotoXY>
	    	  	  	  	    SSD1306_Puts(displayString, &Font_11x18, 1);
 800118a:	463b      	mov	r3, r7
 800118c:	2201      	movs	r2, #1
 800118e:	4940      	ldr	r1, [pc, #256]	; (8001290 <main+0x2a8>)
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fc65 	bl	8001a60 <SSD1306_Puts>
	    	  	  	  	    SSD1306_UpdateScreen();
 8001196:	f000 fb27 	bl	80017e8 <SSD1306_UpdateScreen>
	    	  	  	  	    if((adcValue/41)>50)
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	f640 022a 	movw	r2, #2090	; 0x82a
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <main+0x1c0>
	    	  	  	  	    {
	    	  	  	  	    	f=1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	  	  	  	    }
	    	  	  	  	    if(f==1)
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d117      	bne.n	80011de <main+0x1f6>
	    	  	  	  	    {
	    	  	  	  	    	SSD1306_GotoXY(0,20);
 80011ae:	2114      	movs	r1, #20
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 fbbf 	bl	8001934 <SSD1306_GotoXY>
	    	  	  	  	    	SSD1306_Puts("OVER SPEED!!!", &Font_11x18, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <main+0x2a8>)
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <main+0x2ac>)
 80011bc:	f000 fc50 	bl	8001a60 <SSD1306_Puts>
	    	  	  	  	        HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 ff1c 	bl	8002000 <HAL_Delay>
	    	  	  	  	        HAL_GPIO_WritePin(GPIOC, BUZZ_Pin,1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	4832      	ldr	r0, [pc, #200]	; (8001298 <main+0x2b0>)
 80011d0:	f001 ff38 	bl	8003044 <HAL_GPIO_WritePin>
	    	  	  	  	        HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f000 ff12 	bl	8002000 <HAL_Delay>
 80011dc:	e015      	b.n	800120a <main+0x222>
	    	  	  	  	    }
	    	  	  	  	    else if(f==0)
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d112      	bne.n	800120a <main+0x222>
	    	  	  	  	    {
	    	  	  	  	        HAL_GPIO_WritePin(GPIOC, BUZZ_Pin,0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ea:	482b      	ldr	r0, [pc, #172]	; (8001298 <main+0x2b0>)
 80011ec:	f001 ff2a 	bl	8003044 <HAL_GPIO_WritePin>
	    	  	  	  	 	    HAL_Delay(1000);
 80011f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f4:	f000 ff04 	bl	8002000 <HAL_Delay>
	    	  	  	  	    	SSD1306_GotoXY(0,20);
 80011f8:	2114      	movs	r1, #20
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 fb9a 	bl	8001934 <SSD1306_GotoXY>
	    	  	  	  	    	SSD1306_Puts("             ", &Font_11x18, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	4923      	ldr	r1, [pc, #140]	; (8001290 <main+0x2a8>)
 8001204:	4825      	ldr	r0, [pc, #148]	; (800129c <main+0x2b4>)
 8001206:	f000 fc2b 	bl	8001a60 <SSD1306_Puts>

	    	  	  	  	    }
	    	  	  	  	    SSD1306_UpdateScreen();
 800120a:	f000 faed 	bl	80017e8 <SSD1306_UpdateScreen>



	    	  	  	  	    HAL_Delay(1000);
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f000 fef5 	bl	8002000 <HAL_Delay>

	      }
	      if(HAL_GPIO_ReadPin(GPIOA,SW4_Pin)==0)
 8001216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x26c>)
 800121c:	f001 fefa 	bl	8003014 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <main+0x242>
	      {
	    	 flag=1;
 8001226:	2301      	movs	r3, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
	      }

	      if(flag==1)
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	f47f af0d 	bne.w	800104c <main+0x64>
	      {
	    	  cmd(0x01);
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fd9a 	bl	8000d6c <cmd>
	    	  cmd(0x80);
 8001238:	2080      	movs	r0, #128	; 0x80
 800123a:	f7ff fd97 	bl	8000d6c <cmd>
	    	  input("ENGINE OFF!!");
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <main+0x2b8>)
 8001240:	f7ff fe04 	bl	8000e4c <input>
	    	  HAL_Delay(15000);
 8001244:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001248:	f000 feda 	bl	8002000 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB,SW1_Pin)==0)
 800124c:	e6fe      	b.n	800104c <main+0x64>
 800124e:	bf00      	nop
 8001250:	08004d4c 	.word	0x08004d4c
 8001254:	40020000 	.word	0x40020000
 8001258:	08004d54 	.word	0x08004d54
 800125c:	40020400 	.word	0x40020400
 8001260:	08004d64 	.word	0x08004d64
 8001264:	20000094 	.word	0x20000094
 8001268:	40140000 	.word	0x40140000
 800126c:	408f4000 	.word	0x408f4000
 8001270:	40f00000 	.word	0x40f00000
 8001274:	08004d74 	.word	0x08004d74
 8001278:	08004d80 	.word	0x08004d80
 800127c:	08004d84 	.word	0x08004d84
 8001280:	08004d98 	.word	0x08004d98
 8001284:	200000dc 	.word	0x200000dc
 8001288:	c7ce0c7d 	.word	0xc7ce0c7d
 800128c:	08004da4 	.word	0x08004da4
 8001290:	20000000 	.word	0x20000000
 8001294:	08004db0 	.word	0x08004db0
 8001298:	40020800 	.word	0x40020800
 800129c:	08004dc0 	.word	0x08004dc0
 80012a0:	08004dd0 	.word	0x08004dd0

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f8c8 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <SystemClock_Config+0xb4>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <SystemClock_Config+0xb4>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <SystemClock_Config+0xb4>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <SystemClock_Config+0xb8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <SystemClock_Config+0xb8>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <SystemClock_Config+0xb8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fc29 	bl	8003b6c <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001320:	f000 f998 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fe8c 	bl	800405c <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800134a:	f000 f983 	bl	8001654 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3750      	adds	r7, #80	; 0x50
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <MX_ADC1_Init+0x98>)
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <MX_ADC1_Init+0x9c>)
 8001376:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_ADC1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_ADC1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <MX_ADC1_Init+0xa0>)
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013c0:	f000 fe42 	bl	8002048 <HAL_ADC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 f943 	bl	8001654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ce:	230a      	movs	r3, #10
 80013d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_ADC1_Init+0x98>)
 80013e0:	f001 f942 	bl	8002668 <HAL_ADC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013ea:	f000 f933 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000094 	.word	0x20000094
 80013fc:	40012000 	.word	0x40012000
 8001400:	0f000001 	.word	0x0f000001

08001404 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <MX_ADC2_Init+0x98>)
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <MX_ADC2_Init+0x9c>)
 800141a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_ADC2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_ADC2_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_ADC2_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_ADC2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_ADC2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_ADC2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_ADC2_Init+0x98>)
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <MX_ADC2_Init+0xa0>)
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_ADC2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_ADC2_Init+0x98>)
 8001450:	2201      	movs	r2, #1
 8001452:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_ADC2_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_ADC2_Init+0x98>)
 800145e:	2201      	movs	r2, #1
 8001460:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_ADC2_Init+0x98>)
 8001464:	f000 fdf0 	bl	8002048 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 f8f1 	bl	8001654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001472:	230b      	movs	r3, #11
 8001474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <MX_ADC2_Init+0x98>)
 8001484:	f001 f8f0 	bl	8002668 <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800148e:	f000 f8e1 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000dc 	.word	0x200000dc
 80014a0:	40012100 	.word	0x40012100
 80014a4:	0f000001 	.word	0x0f000001

080014a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <MX_I2C2_Init+0x54>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_I2C2_Init+0x58>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_I2C2_Init+0x50>)
 80014e6:	f001 fdc7 	bl	8003078 <HAL_I2C_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014f0:	f000 f8b0 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000124 	.word	0x20000124
 80014fc:	40005800 	.word	0x40005800
 8001500:	00061a80 	.word	0x00061a80

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <MX_GPIO_Init+0x140>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a48      	ldr	r2, [pc, #288]	; (8001644 <MX_GPIO_Init+0x140>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <MX_GPIO_Init+0x140>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <MX_GPIO_Init+0x140>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a41      	ldr	r2, [pc, #260]	; (8001644 <MX_GPIO_Init+0x140>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <MX_GPIO_Init+0x140>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x140>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <MX_GPIO_Init+0x140>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_GPIO_Init+0x140>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_GPIO_Init+0x140>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <MX_GPIO_Init+0x140>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_GPIO_Init+0x140>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin|LED_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f240 1103 	movw	r1, #259	; 0x103
 8001590:	482d      	ldr	r0, [pc, #180]	; (8001648 <MX_GPIO_Init+0x144>)
 8001592:	f001 fd57 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 710c 	mov.w	r1, #560	; 0x230
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <MX_GPIO_Init+0x148>)
 800159e:	f001 fd51 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 80015a2:	2200      	movs	r2, #0
 80015a4:	f24f 0103 	movw	r1, #61443	; 0xf003
 80015a8:	4829      	ldr	r0, [pc, #164]	; (8001650 <MX_GPIO_Init+0x14c>)
 80015aa:	f001 fd4b 	bl	8003044 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|LED_Pin;
 80015ae:	f240 1303 	movw	r3, #259	; 0x103
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <MX_GPIO_Init+0x144>)
 80015c8:	f001 fb88 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|BUZZ_Pin;
 80015cc:	f44f 730c 	mov.w	r3, #560	; 0x230
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4819      	ldr	r0, [pc, #100]	; (800164c <MX_GPIO_Init+0x148>)
 80015e6:	f001 fb79 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 80015ea:	f24f 0303 	movw	r3, #61443	; 0xf003
 80015ee:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001604:	f001 fb6a 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW4_Pin */
  GPIO_InitStruct.Pin = SW4_Pin;
 8001608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <MX_GPIO_Init+0x144>)
 800161e:	f001 fb5d 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW1_Pin;
 8001622:	2398      	movs	r3, #152	; 0x98
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001636:	f001 fb51 	bl	8002cdc <HAL_GPIO_Init>

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020800 	.word	0x40020800
 8001650:	40020400 	.word	0x40020400

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001666:	f000 fa21 	bl	8001aac <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800166a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800166e:	2201      	movs	r2, #1
 8001670:	2178      	movs	r1, #120	; 0x78
 8001672:	485b      	ldr	r0, [pc, #364]	; (80017e0 <SSD1306_Init+0x180>)
 8001674:	f001 ff42 	bl	80034fc <HAL_I2C_IsDeviceReady>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800167e:	2300      	movs	r3, #0
 8001680:	e0a9      	b.n	80017d6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001682:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001686:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001688:	e002      	b.n	8001690 <SSD1306_Init+0x30>
		p--;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3b01      	subs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001696:	22ae      	movs	r2, #174	; 0xae
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f000 fa82 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80016a0:	2220      	movs	r2, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 fa7d 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016aa:	2210      	movs	r2, #16
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f000 fa78 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016b4:	22b0      	movs	r2, #176	; 0xb0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	; 0x78
 80016ba:	f000 fa73 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016be:	22c8      	movs	r2, #200	; 0xc8
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 fa6e 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	; 0x78
 80016ce:	f000 fa69 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016d2:	2210      	movs	r2, #16
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	; 0x78
 80016d8:	f000 fa64 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f000 fa5f 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016e6:	2281      	movs	r2, #129	; 0x81
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 fa5a 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016f0:	22ff      	movs	r2, #255	; 0xff
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f000 fa55 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016fa:	22a1      	movs	r2, #161	; 0xa1
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 fa50 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001704:	22a6      	movs	r2, #166	; 0xa6
 8001706:	2100      	movs	r1, #0
 8001708:	2078      	movs	r0, #120	; 0x78
 800170a:	f000 fa4b 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800170e:	22a8      	movs	r2, #168	; 0xa8
 8001710:	2100      	movs	r1, #0
 8001712:	2078      	movs	r0, #120	; 0x78
 8001714:	f000 fa46 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001718:	223f      	movs	r2, #63	; 0x3f
 800171a:	2100      	movs	r1, #0
 800171c:	2078      	movs	r0, #120	; 0x78
 800171e:	f000 fa41 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001722:	22a4      	movs	r2, #164	; 0xa4
 8001724:	2100      	movs	r1, #0
 8001726:	2078      	movs	r0, #120	; 0x78
 8001728:	f000 fa3c 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800172c:	22d3      	movs	r2, #211	; 0xd3
 800172e:	2100      	movs	r1, #0
 8001730:	2078      	movs	r0, #120	; 0x78
 8001732:	f000 fa37 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2078      	movs	r0, #120	; 0x78
 800173c:	f000 fa32 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001740:	22d5      	movs	r2, #213	; 0xd5
 8001742:	2100      	movs	r1, #0
 8001744:	2078      	movs	r0, #120	; 0x78
 8001746:	f000 fa2d 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800174a:	22f0      	movs	r2, #240	; 0xf0
 800174c:	2100      	movs	r1, #0
 800174e:	2078      	movs	r0, #120	; 0x78
 8001750:	f000 fa28 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001754:	22d9      	movs	r2, #217	; 0xd9
 8001756:	2100      	movs	r1, #0
 8001758:	2078      	movs	r0, #120	; 0x78
 800175a:	f000 fa23 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800175e:	2222      	movs	r2, #34	; 0x22
 8001760:	2100      	movs	r1, #0
 8001762:	2078      	movs	r0, #120	; 0x78
 8001764:	f000 fa1e 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001768:	22da      	movs	r2, #218	; 0xda
 800176a:	2100      	movs	r1, #0
 800176c:	2078      	movs	r0, #120	; 0x78
 800176e:	f000 fa19 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001772:	2212      	movs	r2, #18
 8001774:	2100      	movs	r1, #0
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f000 fa14 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800177c:	22db      	movs	r2, #219	; 0xdb
 800177e:	2100      	movs	r1, #0
 8001780:	2078      	movs	r0, #120	; 0x78
 8001782:	f000 fa0f 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001786:	2220      	movs	r2, #32
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f000 fa0a 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001790:	228d      	movs	r2, #141	; 0x8d
 8001792:	2100      	movs	r1, #0
 8001794:	2078      	movs	r0, #120	; 0x78
 8001796:	f000 fa05 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800179a:	2214      	movs	r2, #20
 800179c:	2100      	movs	r1, #0
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f000 fa00 	bl	8001ba4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017a4:	22af      	movs	r2, #175	; 0xaf
 80017a6:	2100      	movs	r1, #0
 80017a8:	2078      	movs	r0, #120	; 0x78
 80017aa:	f000 f9fb 	bl	8001ba4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017ae:	222e      	movs	r2, #46	; 0x2e
 80017b0:	2100      	movs	r1, #0
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f000 f9f6 	bl	8001ba4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 f843 	bl	8001844 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80017be:	f000 f813 	bl	80017e8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <SSD1306_Init+0x184>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SSD1306_Init+0x184>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SSD1306_Init+0x184>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000124 	.word	0x20000124
 80017e4:	20000578 	.word	0x20000578

080017e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e01d      	b.n	8001830 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	3b50      	subs	r3, #80	; 0x50
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 f9d0 	bl	8001ba4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f000 f9cb 	bl	8001ba4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800180e:	2210      	movs	r2, #16
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 f9c6 	bl	8001ba4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	01db      	lsls	r3, r3, #7
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <SSD1306_UpdateScreen+0x58>)
 800181e:	441a      	add	r2, r3
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 f957 	bl	8001ad8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	3301      	adds	r3, #1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b07      	cmp	r3, #7
 8001834:	d9de      	bls.n	80017f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000178 	.word	0x20000178

08001844 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <SSD1306_Fill+0x14>
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <SSD1306_Fill+0x16>
 8001858:	23ff      	movs	r3, #255	; 0xff
 800185a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185e:	4619      	mov	r1, r3
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <SSD1306_Fill+0x2c>)
 8001862:	f002 fdf1 	bl	8004448 <memset>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000178 	.word	0x20000178

08001874 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	80bb      	strh	r3, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	70fb      	strb	r3, [r7, #3]
	if (
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	2b7f      	cmp	r3, #127	; 0x7f
 800188a:	d848      	bhi.n	800191e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	2b3f      	cmp	r3, #63	; 0x3f
 8001890:	d845      	bhi.n	800191e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <SSD1306_DrawPixel+0xb8>)
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d11a      	bne.n	80018e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	b298      	uxth	r0, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	01db      	lsls	r3, r3, #7
 80018ba:	4413      	add	r3, r2
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <SSD1306_DrawPixel+0xbc>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b259      	sxtb	r1, r3
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4413      	add	r3, r2
 80018dc:	b2c9      	uxtb	r1, r1
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <SSD1306_DrawPixel+0xbc>)
 80018e0:	54d1      	strb	r1, [r2, r3]
 80018e2:	e01d      	b.n	8001920 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	b298      	uxth	r0, r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	4413      	add	r3, r2
 80018f2:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <SSD1306_DrawPixel+0xbc>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	b25b      	sxtb	r3, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4013      	ands	r3, r2
 800190c:	b259      	sxtb	r1, r3
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	4603      	mov	r3, r0
 8001912:	01db      	lsls	r3, r3, #7
 8001914:	4413      	add	r3, r2
 8001916:	b2c9      	uxtb	r1, r1
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SSD1306_DrawPixel+0xbc>)
 800191a:	54d1      	strb	r1, [r2, r3]
 800191c:	e000      	b.n	8001920 <SSD1306_DrawPixel+0xac>
		return;
 800191e:	bf00      	nop
	}
}
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000578 	.word	0x20000578
 8001930:	20000178 	.word	0x20000178

08001934 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	80fb      	strh	r3, [r7, #6]
 8001940:	4613      	mov	r3, r2
 8001942:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <SSD1306_GotoXY+0x28>)
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <SSD1306_GotoXY+0x28>)
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	8053      	strh	r3, [r2, #2]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000578 	.word	0x20000578

08001960 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <SSD1306_Putc+0xfc>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
	if (
 800197c:	2b7f      	cmp	r3, #127	; 0x7f
 800197e:	dc07      	bgt.n	8001990 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <SSD1306_Putc+0xfc>)
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800198c:	2b3f      	cmp	r3, #63	; 0x3f
 800198e:	dd01      	ble.n	8001994 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e05e      	b.n	8001a52 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e04b      	b.n	8001a32 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3b20      	subs	r3, #32
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	7849      	ldrb	r1, [r1, #1]
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	440b      	add	r3, r1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e030      	b.n	8001a20 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <SSD1306_Putc+0xfc>)
 80019d0:	881a      	ldrh	r2, [r3, #0]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b298      	uxth	r0, r3
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <SSD1306_Putc+0xfc>)
 80019dc:	885a      	ldrh	r2, [r3, #2]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	79ba      	ldrb	r2, [r7, #6]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff ff43 	bl	8001874 <SSD1306_DrawPixel>
 80019ee:	e014      	b.n	8001a1a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <SSD1306_Putc+0xfc>)
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	b298      	uxth	r0, r3
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <SSD1306_Putc+0xfc>)
 80019fe:	885a      	ldrh	r2, [r3, #2]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b299      	uxth	r1, r3
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	f7ff ff2d 	bl	8001874 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d3c8      	bcc.n	80019be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	461a      	mov	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d3ad      	bcc.n	800199a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <SSD1306_Putc+0xfc>)
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <SSD1306_Putc+0xfc>)
 8001a4e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000578 	.word	0x20000578

08001a60 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a6e:	e012      	b.n	8001a96 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	79fa      	ldrb	r2, [r7, #7]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff71 	bl	8001960 <SSD1306_Putc>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d002      	beq.n	8001a90 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	e008      	b.n	8001aa2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e8      	bne.n	8001a70 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <ssd1306_I2C_Init>:
//  | | / /| |___
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <ssd1306_I2C_Init+0x28>)
 8001ab4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ab6:	e002      	b.n	8001abe <ssd1306_I2C_Init+0x12>
		p--;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f9      	bne.n	8001ab8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	0003d090 	.word	0x0003d090

08001ad8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b0c7      	sub	sp, #284	; 0x11c
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ae6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001aea:	600a      	str	r2, [r1, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001af2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001af6:	4622      	mov	r2, r4
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001afe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b02:	4602      	mov	r2, r0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b0e:	460a      	mov	r2, r1
 8001b10:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b1e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b22:	7812      	ldrb	r2, [r2, #0]
 8001b24:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b2c:	e015      	b.n	8001b5a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b42:	3301      	adds	r3, #1
 8001b44:	7811      	ldrb	r1, [r2, #0]
 8001b46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b4a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b4e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b54:	3301      	adds	r3, #1
 8001b56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b64:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8df      	bhi.n	8001b2e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b72:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	9000      	str	r0, [sp, #0]
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001b92:	f001 fbb5 	bl	8003300 <HAL_I2C_Master_Transmit>
}
 8001b96:	bf00      	nop
 8001b98:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	20000124 	.word	0x20000124

08001ba4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <ssd1306_I2C_Write+0x38>)
 8001bce:	f001 fb97 	bl	8003300 <HAL_I2C_Master_Transmit>
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000124 	.word	0x20000124

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_ADC_MspInit+0xf8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d130      	bne.n	8001cb4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <HAL_ADC_MspInit+0x100>)
 8001c9e:	f001 f81d 	bl	8002cdc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2012      	movs	r0, #18
 8001ca8:	f000 ffe1 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cac:	2012      	movs	r0, #18
 8001cae:	f000 fffa 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cb2:	e034      	b.n	8001d1e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_ADC_MspInit+0x104>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12f      	bne.n	8001d1e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_ADC_MspInit+0xfc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPEED_Pin;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEED_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <HAL_ADC_MspInit+0x100>)
 8001d0a:	f000 ffe7 	bl	8002cdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2012      	movs	r0, #18
 8001d14:	f000 ffab 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d18:	2012      	movs	r0, #18
 8001d1a:	f000 ffc4 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3730      	adds	r7, #48	; 0x30
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40012100 	.word	0x40012100

08001d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_I2C_MspInit+0x84>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12c      	bne.n	8001db4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <HAL_I2C_MspInit+0x8c>)
 8001d94:	f000 ffa2 	bl	8002cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_I2C_MspInit+0x88>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40005800 	.word	0x40005800
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f8d4 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <ADC_IRQHandler+0x14>)
 8001e22:	f000 fae5 	bl	80023f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <ADC_IRQHandler+0x18>)
 8001e28:	f000 fae2 	bl	80023f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000094 	.word	0x20000094
 8001e34:	200000dc 	.word	0x200000dc

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f002 fac4 	bl	80043f4 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20020000 	.word	0x20020000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000580 	.word	0x20000580
 8001ea0:	20000598 	.word	0x20000598

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff ffd7 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f002 fa83 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff f875 	bl	8000fe8 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f0c:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 8001f10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f14:	20000598 	.word	0x20000598

08001f18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <CAN1_RX0_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 fe87 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fe46 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fe9f 	bl	8002cc2 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 fe67 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	20000584 	.word	0x20000584

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000584 	.word	0x20000584

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000010 	.word	0x20000010

08002048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e033      	b.n	80020c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fde2 	bl	8001c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fc06 	bl	80028ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
 80020b6:	e001      	b.n	80020bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Start+0x1a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0b2      	b.n	8002250 <HAL_ADC_Start+0x180>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d018      	beq.n	8002132 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <HAL_ADC_Start+0x18c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_ADC_Start+0x190>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0c9a      	lsrs	r2, r3, #18
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002124:	e002      	b.n	800212c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3b01      	subs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d17a      	bne.n	8002236 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800216a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d106      	bne.n	800218e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f023 0206 	bic.w	r2, r3, #6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_ADC_Start+0x194>)
 800219e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12a      	bne.n	800220c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2b      	ldr	r2, [pc, #172]	; (8002268 <HAL_ADC_Start+0x198>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d015      	beq.n	80021ec <HAL_ADC_Start+0x11c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <HAL_ADC_Start+0x19c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_Start+0x106>
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_ADC_Start+0x194>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_ADC_Start+0x1a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d136      	bne.n	800224e <HAL_ADC_Start+0x17e>
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_ADC_Start+0x194>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d130      	bne.n	800224e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d129      	bne.n	800224e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	e020      	b.n	800224e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_ADC_Start+0x198>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d11b      	bne.n	800224e <HAL_ADC_Start+0x17e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d114      	bne.n	800224e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00b      	b.n	800224e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20000008 	.word	0x20000008
 8002260:	431bde83 	.word	0x431bde83
 8002264:	40012300 	.word	0x40012300
 8002268:	40012000 	.word	0x40012000
 800226c:	40012100 	.word	0x40012100
 8002270:	40012200 	.word	0x40012200

08002274 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_Stop+0x16>
 8002286:	2302      	movs	r3, #2
 8002288:	e021      	b.n	80022ce <HAL_ADC_Stop+0x5a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d113      	bne.n	8002320 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002306:	d10b      	bne.n	8002320 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e063      	b.n	80023e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002320:	f7ff fe62 	bl	8001fe8 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002326:	e021      	b.n	800236c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d01d      	beq.n	800236c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_ADC_PollForConversion+0x6c>
 8002336:	f7ff fe57 	bl	8001fe8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d212      	bcs.n	800236c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d00b      	beq.n	800236c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e03d      	b.n	80023e8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d1d6      	bne.n	8002328 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0212 	mvn.w	r2, #18
 8002382:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d123      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11f      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d049      	beq.n	80024ba <HAL_ADC_IRQHandler+0xca>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d046      	beq.n	80024ba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d12b      	bne.n	80024aa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d127      	bne.n	80024aa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002472:	2b00      	cmp	r3, #0
 8002474:	d119      	bne.n	80024aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0220 	bic.w	r2, r2, #32
 8002484:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8bd 	bl	800262a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0212 	mvn.w	r2, #18
 80024b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d057      	beq.n	8002580 <HAL_ADC_IRQHandler+0x190>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d054      	beq.n	8002580 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d139      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002514:	2b00      	cmp	r3, #0
 8002516:	d12b      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d124      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11d      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d119      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa97 	bl	8002aa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 020c 	mvn.w	r2, #12
 800257e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d017      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1d6>
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d014      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f841 	bl	800263e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0201 	mvn.w	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_ADC_IRQHandler+0x218>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0220 	mvn.w	r2, #32
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f82a 	bl	8002652 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0220 	mvn.w	r2, #32
 8002606:	601a      	str	r2, [r3, #0]
  }
}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e105      	b.n	8002890 <HAL_ADC_ConfigChannel+0x228>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b09      	cmp	r3, #9
 8002692:	d925      	bls.n	80026e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e022      	b.n	8002726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4403      	add	r3, r0
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d824      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b05      	subs	r3, #5
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e04c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	; 0x23
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	; 0x23
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
 80027c8:	e023      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	; 0x41
 80027dc:	221f      	movs	r2, #31
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	3b41      	subs	r3, #65	; 0x41
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_ADC_ConfigChannel+0x234>)
 8002814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d123      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x1e6>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b11      	cmp	r3, #17
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d111      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_ADC_ConfigChannel+0x240>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9a      	lsrs	r2, r3, #18
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	20000008 	.word	0x20000008
 80028a8:	431bde83 	.word	0x431bde83

080028ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b4:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <ADC_Init+0x1f0>)
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <ADC_Init+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e00f      	b.n	80029aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0202 	bic.w	r2, r2, #2
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e1b      	ldrb	r3, [r3, #24]
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	035a      	lsls	r2, r3, #13
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e007      	b.n	8002a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	051a      	lsls	r2, r3, #20
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a62:	025a      	lsls	r2, r3, #9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	029a      	lsls	r2, r3, #10
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	0f000001 	.word	0x0f000001

08002aa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e16b      	b.n	8002fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 815a 	bne.w	8002fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b4 	beq.w	8002fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_GPIO_Init+0x310>)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	220f      	movs	r2, #15
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_GPIO_Init+0x314>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <HAL_GPIO_Init+0x226>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a51      	ldr	r2, [pc, #324]	; (8002ff4 <HAL_GPIO_Init+0x318>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x222>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <HAL_GPIO_Init+0x31c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x21e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	; (8002ffc <HAL_GPIO_Init+0x320>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x21a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4e      	ldr	r2, [pc, #312]	; (8003000 <HAL_GPIO_Init+0x324>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x216>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4d      	ldr	r2, [pc, #308]	; (8003004 <HAL_GPIO_Init+0x328>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x212>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x20e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4b      	ldr	r2, [pc, #300]	; (800300c <HAL_GPIO_Init+0x330>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x20a>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00e      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	e00c      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eea:	2306      	movs	r3, #6
 8002eec:	e00a      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eee:	2305      	movs	r3, #5
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002f02:	2300      	movs	r3, #0
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f14:	4935      	ldr	r1, [pc, #212]	; (8002fec <HAL_GPIO_Init+0x310>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a32      	ldr	r2, [pc, #200]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	f67f ae90 	bls.w	8002cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40021400 	.word	0x40021400
 8003008:	40021800 	.word	0x40021800
 800300c:	40021c00 	.word	0x40021c00
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e001      	b.n	8003036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
 8003050:	4613      	mov	r3, r2
 8003052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003054:	787b      	ldrb	r3, [r7, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003060:	e003      	b.n	800306a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	041a      	lsls	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	619a      	str	r2, [r3, #24]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e12b      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fe4a 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030dc:	f001 f976 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a81      	ldr	r2, [pc, #516]	; (80032ec <HAL_I2C_Init+0x274>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d807      	bhi.n	80030fc <HAL_I2C_Init+0x84>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a80      	ldr	r2, [pc, #512]	; (80032f0 <HAL_I2C_Init+0x278>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e006      	b.n	800310a <HAL_I2C_Init+0x92>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a7d      	ldr	r2, [pc, #500]	; (80032f4 <HAL_I2C_Init+0x27c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0e7      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_I2C_Init+0x280>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9b      	lsrs	r3, r3, #18
 800311c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_I2C_Init+0x274>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d802      	bhi.n	800314c <HAL_I2C_Init+0xd4>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	e009      	b.n	8003160 <HAL_I2C_Init+0xe8>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	4a69      	ldr	r2, [pc, #420]	; (80032fc <HAL_I2C_Init+0x284>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	3301      	adds	r3, #1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	495c      	ldr	r1, [pc, #368]	; (80032ec <HAL_I2C_Init+0x274>)
 800317c:	428b      	cmp	r3, r1
 800317e:	d819      	bhi.n	80031b4 <HAL_I2C_Init+0x13c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e59      	subs	r1, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fbb1 f3f3 	udiv	r3, r1, r3
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003194:	400b      	ands	r3, r1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_I2C_Init+0x138>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e59      	subs	r1, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	e051      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e04f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <HAL_I2C_Init+0x168>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e012      	b.n	8003206 <HAL_I2C_Init+0x18e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Init+0x196>
 800320a:	2301      	movs	r3, #1
 800320c:	e022      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10e      	bne.n	8003234 <HAL_I2C_Init+0x1bc>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e58      	subs	r0, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	440b      	add	r3, r1
 8003224:	fbb0 f3f3 	udiv	r3, r0, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	6809      	ldr	r1, [r1, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6911      	ldr	r1, [r2, #16]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68d2      	ldr	r2, [r2, #12]
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	000186a0 	.word	0x000186a0
 80032f0:	001e847f 	.word	0x001e847f
 80032f4:	003d08ff 	.word	0x003d08ff
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	10624dd3 	.word	0x10624dd3

08003300 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
 8003310:	4613      	mov	r3, r2
 8003312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7fe fe68 	bl	8001fe8 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	f040 80e0 	bne.w	80034e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2319      	movs	r3, #25
 800332e:	2201      	movs	r2, #1
 8003330:	4970      	ldr	r1, [pc, #448]	; (80034f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa92 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
 8003340:	e0d3      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_I2C_Master_Transmit+0x50>
 800334c:	2302      	movs	r3, #2
 800334e:	e0cc      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d007      	beq.n	8003376 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2221      	movs	r2, #33	; 0x21
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2210      	movs	r2, #16
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	893a      	ldrh	r2, [r7, #8]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033b8:	8979      	ldrh	r1, [r7, #10]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f9ca 	bl	8003758 <I2C_MasterRequestWrite>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08d      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033e4:	e066      	b.n	80034b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	6a39      	ldr	r1, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fb0c 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d107      	bne.n	800340e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06b      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d11b      	bne.n	8003488 <HAL_I2C_Master_Transmit+0x188>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	6a39      	ldr	r1, [r7, #32]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fafc 	bl	8003a8a <I2C_WaitOnBTFFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b04      	cmp	r3, #4
 800349e:	d107      	bne.n	80034b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e01a      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d194      	bne.n	80033e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	00100002 	.word	0x00100002
 80034f8:	ffff0000 	.word	0xffff0000

080034fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	460b      	mov	r3, r1
 800350a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7fe fd6c 	bl	8001fe8 <HAL_GetTick>
 8003510:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	f040 8111 	bne.w	8003746 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2319      	movs	r3, #25
 800352a:	2201      	movs	r2, #1
 800352c:	4988      	ldr	r1, [pc, #544]	; (8003750 <HAL_I2C_IsDeviceReady+0x254>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f994 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	e104      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_I2C_IsDeviceReady+0x50>
 8003548:	2302      	movs	r3, #2
 800354a:	e0fd      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d007      	beq.n	8003572 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a70      	ldr	r2, [pc, #448]	; (8003754 <HAL_I2C_IsDeviceReady+0x258>)
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f952 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035cc:	d103      	bne.n	80035d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0b6      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fcfd 	bl	8001fe8 <HAL_GetTick>
 80035ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800361e:	e025      	b.n	800366c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003620:	f7fe fce2 	bl	8001fe8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <HAL_I2C_IsDeviceReady+0x13a>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	22a0      	movs	r2, #160	; 0xa0
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2ba0      	cmp	r3, #160	; 0xa0
 8003676:	d005      	beq.n	8003684 <HAL_I2C_IsDeviceReady+0x188>
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <HAL_I2C_IsDeviceReady+0x188>
 800367e:	7dbb      	ldrb	r3, [r7, #22]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0cd      	beq.n	8003620 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d129      	bne.n	80036ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	4921      	ldr	r1, [pc, #132]	; (8003750 <HAL_I2C_IsDeviceReady+0x254>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8c6 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e036      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e02c      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003706:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2319      	movs	r3, #25
 800370e:	2201      	movs	r2, #1
 8003710:	490f      	ldr	r1, [pc, #60]	; (8003750 <HAL_I2C_IsDeviceReady+0x254>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8a2 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e012      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	3301      	adds	r3, #1
 8003726:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	f4ff af32 	bcc.w	8003596 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000

08003758 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d006      	beq.n	8003782 <I2C_MasterRequestWrite+0x2a>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d003      	beq.n	8003782 <I2C_MasterRequestWrite+0x2a>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00b      	b.n	80037ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	2b12      	cmp	r3, #18
 800379a:	d107      	bne.n	80037ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f84f 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d2:	d103      	bne.n	80037dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e035      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e8:	d108      	bne.n	80037fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	e01b      	b.n	8003834 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	11db      	asrs	r3, r3, #7
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f063 030f 	orn	r3, r3, #15
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <I2C_MasterRequestWrite+0xfc>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f875 	bl	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e010      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <I2C_MasterRequestWrite+0x100>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f865 	bl	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	00010008 	.word	0x00010008
 8003858:	00010002 	.word	0x00010002

0800385c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386c:	e025      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d021      	beq.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fe fbb7 	bl	8001fe8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e023      	b.n	8003902 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10d      	bne.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	e00c      	b.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0b6      	beq.n	800386e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003918:	e051      	b.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d123      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003942:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e046      	b.n	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d021      	beq.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fe fb35 	bl	8001fe8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d116      	bne.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e020      	b.n	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10c      	bne.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e00b      	b.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	43da      	mvns	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d18d      	bne.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a14:	e02d      	b.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f878 	bl	8003b0c <I2C_IsAcknowledgeFailed>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e02d      	b.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d021      	beq.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fe fadb 	bl	8001fe8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e007      	b.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d1ca      	bne.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a96:	e02d      	b.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f837 	bl	8003b0c <I2C_IsAcknowledgeFailed>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e02d      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d021      	beq.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fa9a 	bl	8001fe8 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d1ca      	bne.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d11b      	bne.n	8003b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e267      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d075      	beq.n	8003c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d112      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b82      	ldr	r3, [pc, #520]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x108>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d157      	bne.n	8003c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e242      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x74>
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e01d      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bea:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6f      	ldr	r2, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003c04:	4b69      	ldr	r3, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a68      	ldr	r2, [pc, #416]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a65      	ldr	r2, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe f9e0 	bl	8001fe8 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f9dc 	bl	8001fe8 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e207      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0xc0>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe f9cc 	bl	8001fe8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe f9c8 	bl	8001fe8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1f3      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0xe8>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e1c7      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4937      	ldr	r1, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	e03a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe f981 	bl	8001fe8 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe f97d 	bl	8001fe8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1a8      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4925      	ldr	r1, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe f960 	bl	8001fe8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7fe f95c 	bl	8001fe8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e187      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d036      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe f940 	bl	8001fe8 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fe f93c 	bl	8001fe8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e167      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x200>
 8003d8a:	e01b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe f929 	bl	8001fe8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	e00e      	b.n	8003db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7fe f925 	bl	8001fe8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d907      	bls.n	8003db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e150      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	42470000 	.word	0x42470000
 8003db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ea      	bne.n	8003d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8097 	beq.w	8003f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a7c      	ldr	r2, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b7a      	ldr	r3, [pc, #488]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a73      	ldr	r2, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe f8e5 	bl	8001fe8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7fe f8e1 	bl	8001fe8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e10c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x2ea>
 8003e48:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	e01c      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x30c>
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a57      	ldr	r2, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fe f8a6 	bl	8001fe8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f8a2 	bl	8001fe8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0cb      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x334>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f890 	bl	8001fe8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe f88c 	bl	8001fe8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0b5      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80a1 	beq.w	800404c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d05c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d141      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe f860 	bl	8001fe8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe f85c 	bl	8001fe8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e087      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	491b      	ldr	r1, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fe f835 	bl	8001fe8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fe f831 	bl	8001fe8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e05c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x416>
 8003fa0:	e054      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f81e 	bl	8001fe8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe f81a 	bl	8001fe8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e045      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x444>
 8003fce:	e03d      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e038      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d028      	beq.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d121      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d11a      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800401e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0cc      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d90c      	bls.n	8004098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d119      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d003      	beq.n	800411a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e067      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fd ff4c 	bl	8001fe8 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fd ff48 	bl	8001fe8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20c      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	fa22 f303 	lsr.w	r3, r2, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd feac 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	08005b3c 	.word	0x08005b3c
 8004220:	20000008 	.word	0x20000008
 8004224:	2000000c 	.word	0x2000000c

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b090      	sub	sp, #64	; 0x40
 800422e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
 8004234:	2300      	movs	r3, #0
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004238:	2300      	movs	r3, #0
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d00d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x40>
 800424c:	2b08      	cmp	r3, #8
 800424e:	f200 80a1 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x16c>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004256:	2b04      	cmp	r3, #4
 8004258:	d003      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x3a>
 800425a:	e09b      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_GetSysClockFreq+0x184>)
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004260:	e09b      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004266:	e098      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004272:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	627a      	str	r2, [r7, #36]	; 0x24
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004290:	2100      	movs	r1, #0
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004294:	fb03 f201 	mul.w	r2, r3, r1
 8004298:	2300      	movs	r3, #0
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	4413      	add	r3, r2
 80042a0:	4a43      	ldr	r2, [pc, #268]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a2:	fba0 1202 	umull	r1, r2, r0, r2
 80042a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a8:	460a      	mov	r2, r1
 80042aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80042ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ae:	4413      	add	r3, r2
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	2200      	movs	r2, #0
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	61fa      	str	r2, [r7, #28]
 80042ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042c2:	f7fc fbc3 	bl	8000a4c <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4613      	mov	r3, r2
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ce:	e053      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2200      	movs	r2, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	617a      	str	r2, [r7, #20]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042e2:	f04f 0b00 	mov.w	fp, #0
 80042e6:	4652      	mov	r2, sl
 80042e8:	465b      	mov	r3, fp
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f8:	0150      	lsls	r0, r2, #5
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004302:	eb63 090b 	sbc.w	r9, r3, fp
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800431a:	ebb2 0408 	subs.w	r4, r2, r8
 800431e:	eb63 0509 	sbc.w	r5, r3, r9
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	00eb      	lsls	r3, r5, #3
 800432c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004330:	00e2      	lsls	r2, r4, #3
 8004332:	4614      	mov	r4, r2
 8004334:	461d      	mov	r5, r3
 8004336:	eb14 030a 	adds.w	r3, r4, sl
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	eb45 030b 	adc.w	r3, r5, fp
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800434e:	4629      	mov	r1, r5
 8004350:	028b      	lsls	r3, r1, #10
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004358:	4621      	mov	r1, r4
 800435a:	028a      	lsls	r2, r1, #10
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	2200      	movs	r2, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	60fa      	str	r2, [r7, #12]
 8004368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800436c:	f7fc fb6e 	bl	8000a4c <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	017d7840 	.word	0x017d7840

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000008 	.word	0x20000008

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d0:	f7ff fff0 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a9b      	lsrs	r3, r3, #10
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	08005b4c 	.word	0x08005b4c

080043f4 <__errno>:
 80043f4:	4b01      	ldr	r3, [pc, #4]	; (80043fc <__errno+0x8>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000014 	.word	0x20000014

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4d0d      	ldr	r5, [pc, #52]	; (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004406:	1b64      	subs	r4, r4, r5
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2600      	movs	r6, #0
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4d0b      	ldr	r5, [pc, #44]	; (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	; (8004444 <__libc_init_array+0x44>)
 8004414:	f000 fc8e 	bl	8004d34 <_init>
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2600      	movs	r6, #0
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	08005b90 	.word	0x08005b90
 800443c:	08005b90 	.word	0x08005b90
 8004440:	08005b90 	.word	0x08005b90
 8004444:	08005b94 	.word	0x08005b94

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <siprintf>:
 8004458:	b40e      	push	{r1, r2, r3}
 800445a:	b500      	push	{lr}
 800445c:	b09c      	sub	sp, #112	; 0x70
 800445e:	ab1d      	add	r3, sp, #116	; 0x74
 8004460:	9002      	str	r0, [sp, #8]
 8004462:	9006      	str	r0, [sp, #24]
 8004464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004468:	4809      	ldr	r0, [pc, #36]	; (8004490 <siprintf+0x38>)
 800446a:	9107      	str	r1, [sp, #28]
 800446c:	9104      	str	r1, [sp, #16]
 800446e:	4909      	ldr	r1, [pc, #36]	; (8004494 <siprintf+0x3c>)
 8004470:	f853 2b04 	ldr.w	r2, [r3], #4
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	a902      	add	r1, sp, #8
 800447c:	f000 f868 	bl	8004550 <_svfiprintf_r>
 8004480:	9b02      	ldr	r3, [sp, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	b01c      	add	sp, #112	; 0x70
 8004488:	f85d eb04 	ldr.w	lr, [sp], #4
 800448c:	b003      	add	sp, #12
 800448e:	4770      	bx	lr
 8004490:	20000014 	.word	0x20000014
 8004494:	ffff0208 	.word	0xffff0208

08004498 <__ssputs_r>:
 8004498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449c:	688e      	ldr	r6, [r1, #8]
 800449e:	429e      	cmp	r6, r3
 80044a0:	4682      	mov	sl, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	4690      	mov	r8, r2
 80044a6:	461f      	mov	r7, r3
 80044a8:	d838      	bhi.n	800451c <__ssputs_r+0x84>
 80044aa:	898a      	ldrh	r2, [r1, #12]
 80044ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044b0:	d032      	beq.n	8004518 <__ssputs_r+0x80>
 80044b2:	6825      	ldr	r5, [r4, #0]
 80044b4:	6909      	ldr	r1, [r1, #16]
 80044b6:	eba5 0901 	sub.w	r9, r5, r1
 80044ba:	6965      	ldr	r5, [r4, #20]
 80044bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c4:	3301      	adds	r3, #1
 80044c6:	444b      	add	r3, r9
 80044c8:	106d      	asrs	r5, r5, #1
 80044ca:	429d      	cmp	r5, r3
 80044cc:	bf38      	it	cc
 80044ce:	461d      	movcc	r5, r3
 80044d0:	0553      	lsls	r3, r2, #21
 80044d2:	d531      	bpl.n	8004538 <__ssputs_r+0xa0>
 80044d4:	4629      	mov	r1, r5
 80044d6:	f000 fb63 	bl	8004ba0 <_malloc_r>
 80044da:	4606      	mov	r6, r0
 80044dc:	b950      	cbnz	r0, 80044f4 <__ssputs_r+0x5c>
 80044de:	230c      	movs	r3, #12
 80044e0:	f8ca 3000 	str.w	r3, [sl]
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	6921      	ldr	r1, [r4, #16]
 80044f6:	464a      	mov	r2, r9
 80044f8:	f000 fabe 	bl	8004a78 <memcpy>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	6126      	str	r6, [r4, #16]
 800450a:	6165      	str	r5, [r4, #20]
 800450c:	444e      	add	r6, r9
 800450e:	eba5 0509 	sub.w	r5, r5, r9
 8004512:	6026      	str	r6, [r4, #0]
 8004514:	60a5      	str	r5, [r4, #8]
 8004516:	463e      	mov	r6, r7
 8004518:	42be      	cmp	r6, r7
 800451a:	d900      	bls.n	800451e <__ssputs_r+0x86>
 800451c:	463e      	mov	r6, r7
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	4632      	mov	r2, r6
 8004522:	4641      	mov	r1, r8
 8004524:	f000 fab6 	bl	8004a94 <memmove>
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	1b9b      	subs	r3, r3, r6
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4433      	add	r3, r6
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2000      	movs	r0, #0
 8004536:	e7db      	b.n	80044f0 <__ssputs_r+0x58>
 8004538:	462a      	mov	r2, r5
 800453a:	f000 fba5 	bl	8004c88 <_realloc_r>
 800453e:	4606      	mov	r6, r0
 8004540:	2800      	cmp	r0, #0
 8004542:	d1e1      	bne.n	8004508 <__ssputs_r+0x70>
 8004544:	6921      	ldr	r1, [r4, #16]
 8004546:	4650      	mov	r0, sl
 8004548:	f000 fabe 	bl	8004ac8 <_free_r>
 800454c:	e7c7      	b.n	80044de <__ssputs_r+0x46>
	...

08004550 <_svfiprintf_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	4698      	mov	r8, r3
 8004556:	898b      	ldrh	r3, [r1, #12]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	b09d      	sub	sp, #116	; 0x74
 800455c:	4607      	mov	r7, r0
 800455e:	460d      	mov	r5, r1
 8004560:	4614      	mov	r4, r2
 8004562:	d50e      	bpl.n	8004582 <_svfiprintf_r+0x32>
 8004564:	690b      	ldr	r3, [r1, #16]
 8004566:	b963      	cbnz	r3, 8004582 <_svfiprintf_r+0x32>
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	f000 fb19 	bl	8004ba0 <_malloc_r>
 800456e:	6028      	str	r0, [r5, #0]
 8004570:	6128      	str	r0, [r5, #16]
 8004572:	b920      	cbnz	r0, 800457e <_svfiprintf_r+0x2e>
 8004574:	230c      	movs	r3, #12
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e0d1      	b.n	8004722 <_svfiprintf_r+0x1d2>
 800457e:	2340      	movs	r3, #64	; 0x40
 8004580:	616b      	str	r3, [r5, #20]
 8004582:	2300      	movs	r3, #0
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	2320      	movs	r3, #32
 8004588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800458c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004590:	2330      	movs	r3, #48	; 0x30
 8004592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800473c <_svfiprintf_r+0x1ec>
 8004596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800459a:	f04f 0901 	mov.w	r9, #1
 800459e:	4623      	mov	r3, r4
 80045a0:	469a      	mov	sl, r3
 80045a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a6:	b10a      	cbz	r2, 80045ac <_svfiprintf_r+0x5c>
 80045a8:	2a25      	cmp	r2, #37	; 0x25
 80045aa:	d1f9      	bne.n	80045a0 <_svfiprintf_r+0x50>
 80045ac:	ebba 0b04 	subs.w	fp, sl, r4
 80045b0:	d00b      	beq.n	80045ca <_svfiprintf_r+0x7a>
 80045b2:	465b      	mov	r3, fp
 80045b4:	4622      	mov	r2, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	4638      	mov	r0, r7
 80045ba:	f7ff ff6d 	bl	8004498 <__ssputs_r>
 80045be:	3001      	adds	r0, #1
 80045c0:	f000 80aa 	beq.w	8004718 <_svfiprintf_r+0x1c8>
 80045c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045c6:	445a      	add	r2, fp
 80045c8:	9209      	str	r2, [sp, #36]	; 0x24
 80045ca:	f89a 3000 	ldrb.w	r3, [sl]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a2 	beq.w	8004718 <_svfiprintf_r+0x1c8>
 80045d4:	2300      	movs	r3, #0
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295
 80045da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045de:	f10a 0a01 	add.w	sl, sl, #1
 80045e2:	9304      	str	r3, [sp, #16]
 80045e4:	9307      	str	r3, [sp, #28]
 80045e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ea:	931a      	str	r3, [sp, #104]	; 0x68
 80045ec:	4654      	mov	r4, sl
 80045ee:	2205      	movs	r2, #5
 80045f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f4:	4851      	ldr	r0, [pc, #324]	; (800473c <_svfiprintf_r+0x1ec>)
 80045f6:	f7fb fdeb 	bl	80001d0 <memchr>
 80045fa:	9a04      	ldr	r2, [sp, #16]
 80045fc:	b9d8      	cbnz	r0, 8004636 <_svfiprintf_r+0xe6>
 80045fe:	06d0      	lsls	r0, r2, #27
 8004600:	bf44      	itt	mi
 8004602:	2320      	movmi	r3, #32
 8004604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004608:	0711      	lsls	r1, r2, #28
 800460a:	bf44      	itt	mi
 800460c:	232b      	movmi	r3, #43	; 0x2b
 800460e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b2a      	cmp	r3, #42	; 0x2a
 8004618:	d015      	beq.n	8004646 <_svfiprintf_r+0xf6>
 800461a:	9a07      	ldr	r2, [sp, #28]
 800461c:	4654      	mov	r4, sl
 800461e:	2000      	movs	r0, #0
 8004620:	f04f 0c0a 	mov.w	ip, #10
 8004624:	4621      	mov	r1, r4
 8004626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462a:	3b30      	subs	r3, #48	; 0x30
 800462c:	2b09      	cmp	r3, #9
 800462e:	d94e      	bls.n	80046ce <_svfiprintf_r+0x17e>
 8004630:	b1b0      	cbz	r0, 8004660 <_svfiprintf_r+0x110>
 8004632:	9207      	str	r2, [sp, #28]
 8004634:	e014      	b.n	8004660 <_svfiprintf_r+0x110>
 8004636:	eba0 0308 	sub.w	r3, r0, r8
 800463a:	fa09 f303 	lsl.w	r3, r9, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	9304      	str	r3, [sp, #16]
 8004642:	46a2      	mov	sl, r4
 8004644:	e7d2      	b.n	80045ec <_svfiprintf_r+0x9c>
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	1d19      	adds	r1, r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	9103      	str	r1, [sp, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfbb      	ittet	lt
 8004652:	425b      	neglt	r3, r3
 8004654:	f042 0202 	orrlt.w	r2, r2, #2
 8004658:	9307      	strge	r3, [sp, #28]
 800465a:	9307      	strlt	r3, [sp, #28]
 800465c:	bfb8      	it	lt
 800465e:	9204      	strlt	r2, [sp, #16]
 8004660:	7823      	ldrb	r3, [r4, #0]
 8004662:	2b2e      	cmp	r3, #46	; 0x2e
 8004664:	d10c      	bne.n	8004680 <_svfiprintf_r+0x130>
 8004666:	7863      	ldrb	r3, [r4, #1]
 8004668:	2b2a      	cmp	r3, #42	; 0x2a
 800466a:	d135      	bne.n	80046d8 <_svfiprintf_r+0x188>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	1d1a      	adds	r2, r3, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	9203      	str	r2, [sp, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfb8      	it	lt
 8004678:	f04f 33ff 	movlt.w	r3, #4294967295
 800467c:	3402      	adds	r4, #2
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800474c <_svfiprintf_r+0x1fc>
 8004684:	7821      	ldrb	r1, [r4, #0]
 8004686:	2203      	movs	r2, #3
 8004688:	4650      	mov	r0, sl
 800468a:	f7fb fda1 	bl	80001d0 <memchr>
 800468e:	b140      	cbz	r0, 80046a2 <_svfiprintf_r+0x152>
 8004690:	2340      	movs	r3, #64	; 0x40
 8004692:	eba0 000a 	sub.w	r0, r0, sl
 8004696:	fa03 f000 	lsl.w	r0, r3, r0
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	4303      	orrs	r3, r0
 800469e:	3401      	adds	r4, #1
 80046a0:	9304      	str	r3, [sp, #16]
 80046a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a6:	4826      	ldr	r0, [pc, #152]	; (8004740 <_svfiprintf_r+0x1f0>)
 80046a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ac:	2206      	movs	r2, #6
 80046ae:	f7fb fd8f 	bl	80001d0 <memchr>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d038      	beq.n	8004728 <_svfiprintf_r+0x1d8>
 80046b6:	4b23      	ldr	r3, [pc, #140]	; (8004744 <_svfiprintf_r+0x1f4>)
 80046b8:	bb1b      	cbnz	r3, 8004702 <_svfiprintf_r+0x1b2>
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	3307      	adds	r3, #7
 80046be:	f023 0307 	bic.w	r3, r3, #7
 80046c2:	3308      	adds	r3, #8
 80046c4:	9303      	str	r3, [sp, #12]
 80046c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c8:	4433      	add	r3, r6
 80046ca:	9309      	str	r3, [sp, #36]	; 0x24
 80046cc:	e767      	b.n	800459e <_svfiprintf_r+0x4e>
 80046ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d2:	460c      	mov	r4, r1
 80046d4:	2001      	movs	r0, #1
 80046d6:	e7a5      	b.n	8004624 <_svfiprintf_r+0xd4>
 80046d8:	2300      	movs	r3, #0
 80046da:	3401      	adds	r4, #1
 80046dc:	9305      	str	r3, [sp, #20]
 80046de:	4619      	mov	r1, r3
 80046e0:	f04f 0c0a 	mov.w	ip, #10
 80046e4:	4620      	mov	r0, r4
 80046e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ea:	3a30      	subs	r2, #48	; 0x30
 80046ec:	2a09      	cmp	r2, #9
 80046ee:	d903      	bls.n	80046f8 <_svfiprintf_r+0x1a8>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0c5      	beq.n	8004680 <_svfiprintf_r+0x130>
 80046f4:	9105      	str	r1, [sp, #20]
 80046f6:	e7c3      	b.n	8004680 <_svfiprintf_r+0x130>
 80046f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80046fc:	4604      	mov	r4, r0
 80046fe:	2301      	movs	r3, #1
 8004700:	e7f0      	b.n	80046e4 <_svfiprintf_r+0x194>
 8004702:	ab03      	add	r3, sp, #12
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	462a      	mov	r2, r5
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <_svfiprintf_r+0x1f8>)
 800470a:	a904      	add	r1, sp, #16
 800470c:	4638      	mov	r0, r7
 800470e:	f3af 8000 	nop.w
 8004712:	1c42      	adds	r2, r0, #1
 8004714:	4606      	mov	r6, r0
 8004716:	d1d6      	bne.n	80046c6 <_svfiprintf_r+0x176>
 8004718:	89ab      	ldrh	r3, [r5, #12]
 800471a:	065b      	lsls	r3, r3, #25
 800471c:	f53f af2c 	bmi.w	8004578 <_svfiprintf_r+0x28>
 8004720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004722:	b01d      	add	sp, #116	; 0x74
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	462a      	mov	r2, r5
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <_svfiprintf_r+0x1f8>)
 8004730:	a904      	add	r1, sp, #16
 8004732:	4638      	mov	r0, r7
 8004734:	f000 f87a 	bl	800482c <_printf_i>
 8004738:	e7eb      	b.n	8004712 <_svfiprintf_r+0x1c2>
 800473a:	bf00      	nop
 800473c:	08005b54 	.word	0x08005b54
 8004740:	08005b5e 	.word	0x08005b5e
 8004744:	00000000 	.word	0x00000000
 8004748:	08004499 	.word	0x08004499
 800474c:	08005b5a 	.word	0x08005b5a

08004750 <_printf_common>:
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	4616      	mov	r6, r2
 8004756:	4699      	mov	r9, r3
 8004758:	688a      	ldr	r2, [r1, #8]
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004760:	4293      	cmp	r3, r2
 8004762:	bfb8      	it	lt
 8004764:	4613      	movlt	r3, r2
 8004766:	6033      	str	r3, [r6, #0]
 8004768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800476c:	4607      	mov	r7, r0
 800476e:	460c      	mov	r4, r1
 8004770:	b10a      	cbz	r2, 8004776 <_printf_common+0x26>
 8004772:	3301      	adds	r3, #1
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	0699      	lsls	r1, r3, #26
 800477a:	bf42      	ittt	mi
 800477c:	6833      	ldrmi	r3, [r6, #0]
 800477e:	3302      	addmi	r3, #2
 8004780:	6033      	strmi	r3, [r6, #0]
 8004782:	6825      	ldr	r5, [r4, #0]
 8004784:	f015 0506 	ands.w	r5, r5, #6
 8004788:	d106      	bne.n	8004798 <_printf_common+0x48>
 800478a:	f104 0a19 	add.w	sl, r4, #25
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	6832      	ldr	r2, [r6, #0]
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	42ab      	cmp	r3, r5
 8004796:	dc26      	bgt.n	80047e6 <_printf_common+0x96>
 8004798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800479c:	1e13      	subs	r3, r2, #0
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	bf18      	it	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	0692      	lsls	r2, r2, #26
 80047a6:	d42b      	bmi.n	8004800 <_printf_common+0xb0>
 80047a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ac:	4649      	mov	r1, r9
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d01e      	beq.n	80047f4 <_printf_common+0xa4>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	68e5      	ldr	r5, [r4, #12]
 80047ba:	6832      	ldr	r2, [r6, #0]
 80047bc:	f003 0306 	and.w	r3, r3, #6
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	bf08      	it	eq
 80047c4:	1aad      	subeq	r5, r5, r2
 80047c6:	68a3      	ldr	r3, [r4, #8]
 80047c8:	6922      	ldr	r2, [r4, #16]
 80047ca:	bf0c      	ite	eq
 80047cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d0:	2500      	movne	r5, #0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	bfc4      	itt	gt
 80047d6:	1a9b      	subgt	r3, r3, r2
 80047d8:	18ed      	addgt	r5, r5, r3
 80047da:	2600      	movs	r6, #0
 80047dc:	341a      	adds	r4, #26
 80047de:	42b5      	cmp	r5, r6
 80047e0:	d11a      	bne.n	8004818 <_printf_common+0xc8>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e008      	b.n	80047f8 <_printf_common+0xa8>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4652      	mov	r2, sl
 80047ea:	4649      	mov	r1, r9
 80047ec:	4638      	mov	r0, r7
 80047ee:	47c0      	blx	r8
 80047f0:	3001      	adds	r0, #1
 80047f2:	d103      	bne.n	80047fc <_printf_common+0xac>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	3501      	adds	r5, #1
 80047fe:	e7c6      	b.n	800478e <_printf_common+0x3e>
 8004800:	18e1      	adds	r1, r4, r3
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	2030      	movs	r0, #48	; 0x30
 8004806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480a:	4422      	add	r2, r4
 800480c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004814:	3302      	adds	r3, #2
 8004816:	e7c7      	b.n	80047a8 <_printf_common+0x58>
 8004818:	2301      	movs	r3, #1
 800481a:	4622      	mov	r2, r4
 800481c:	4649      	mov	r1, r9
 800481e:	4638      	mov	r0, r7
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d0e6      	beq.n	80047f4 <_printf_common+0xa4>
 8004826:	3601      	adds	r6, #1
 8004828:	e7d9      	b.n	80047de <_printf_common+0x8e>
	...

0800482c <_printf_i>:
 800482c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	7e0f      	ldrb	r7, [r1, #24]
 8004832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004834:	2f78      	cmp	r7, #120	; 0x78
 8004836:	4691      	mov	r9, r2
 8004838:	4680      	mov	r8, r0
 800483a:	460c      	mov	r4, r1
 800483c:	469a      	mov	sl, r3
 800483e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004842:	d807      	bhi.n	8004854 <_printf_i+0x28>
 8004844:	2f62      	cmp	r7, #98	; 0x62
 8004846:	d80a      	bhi.n	800485e <_printf_i+0x32>
 8004848:	2f00      	cmp	r7, #0
 800484a:	f000 80d8 	beq.w	80049fe <_printf_i+0x1d2>
 800484e:	2f58      	cmp	r7, #88	; 0x58
 8004850:	f000 80a3 	beq.w	800499a <_printf_i+0x16e>
 8004854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800485c:	e03a      	b.n	80048d4 <_printf_i+0xa8>
 800485e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004862:	2b15      	cmp	r3, #21
 8004864:	d8f6      	bhi.n	8004854 <_printf_i+0x28>
 8004866:	a101      	add	r1, pc, #4	; (adr r1, 800486c <_printf_i+0x40>)
 8004868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800486c:	080048c5 	.word	0x080048c5
 8004870:	080048d9 	.word	0x080048d9
 8004874:	08004855 	.word	0x08004855
 8004878:	08004855 	.word	0x08004855
 800487c:	08004855 	.word	0x08004855
 8004880:	08004855 	.word	0x08004855
 8004884:	080048d9 	.word	0x080048d9
 8004888:	08004855 	.word	0x08004855
 800488c:	08004855 	.word	0x08004855
 8004890:	08004855 	.word	0x08004855
 8004894:	08004855 	.word	0x08004855
 8004898:	080049e5 	.word	0x080049e5
 800489c:	08004909 	.word	0x08004909
 80048a0:	080049c7 	.word	0x080049c7
 80048a4:	08004855 	.word	0x08004855
 80048a8:	08004855 	.word	0x08004855
 80048ac:	08004a07 	.word	0x08004a07
 80048b0:	08004855 	.word	0x08004855
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004855 	.word	0x08004855
 80048bc:	08004855 	.word	0x08004855
 80048c0:	080049cf 	.word	0x080049cf
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	1d1a      	adds	r2, r3, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	602a      	str	r2, [r5, #0]
 80048cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0a3      	b.n	8004a20 <_printf_i+0x1f4>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	6829      	ldr	r1, [r5, #0]
 80048dc:	0606      	lsls	r6, r0, #24
 80048de:	f101 0304 	add.w	r3, r1, #4
 80048e2:	d50a      	bpl.n	80048fa <_printf_i+0xce>
 80048e4:	680e      	ldr	r6, [r1, #0]
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	da03      	bge.n	80048f4 <_printf_i+0xc8>
 80048ec:	232d      	movs	r3, #45	; 0x2d
 80048ee:	4276      	negs	r6, r6
 80048f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f4:	485e      	ldr	r0, [pc, #376]	; (8004a70 <_printf_i+0x244>)
 80048f6:	230a      	movs	r3, #10
 80048f8:	e019      	b.n	800492e <_printf_i+0x102>
 80048fa:	680e      	ldr	r6, [r1, #0]
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004902:	bf18      	it	ne
 8004904:	b236      	sxthne	r6, r6
 8004906:	e7ef      	b.n	80048e8 <_printf_i+0xbc>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	6029      	str	r1, [r5, #0]
 8004910:	0601      	lsls	r1, r0, #24
 8004912:	d501      	bpl.n	8004918 <_printf_i+0xec>
 8004914:	681e      	ldr	r6, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0xf2>
 8004918:	0646      	lsls	r6, r0, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0xe8>
 800491c:	881e      	ldrh	r6, [r3, #0]
 800491e:	4854      	ldr	r0, [pc, #336]	; (8004a70 <_printf_i+0x244>)
 8004920:	2f6f      	cmp	r7, #111	; 0x6f
 8004922:	bf0c      	ite	eq
 8004924:	2308      	moveq	r3, #8
 8004926:	230a      	movne	r3, #10
 8004928:	2100      	movs	r1, #0
 800492a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800492e:	6865      	ldr	r5, [r4, #4]
 8004930:	60a5      	str	r5, [r4, #8]
 8004932:	2d00      	cmp	r5, #0
 8004934:	bfa2      	ittt	ge
 8004936:	6821      	ldrge	r1, [r4, #0]
 8004938:	f021 0104 	bicge.w	r1, r1, #4
 800493c:	6021      	strge	r1, [r4, #0]
 800493e:	b90e      	cbnz	r6, 8004944 <_printf_i+0x118>
 8004940:	2d00      	cmp	r5, #0
 8004942:	d04d      	beq.n	80049e0 <_printf_i+0x1b4>
 8004944:	4615      	mov	r5, r2
 8004946:	fbb6 f1f3 	udiv	r1, r6, r3
 800494a:	fb03 6711 	mls	r7, r3, r1, r6
 800494e:	5dc7      	ldrb	r7, [r0, r7]
 8004950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004954:	4637      	mov	r7, r6
 8004956:	42bb      	cmp	r3, r7
 8004958:	460e      	mov	r6, r1
 800495a:	d9f4      	bls.n	8004946 <_printf_i+0x11a>
 800495c:	2b08      	cmp	r3, #8
 800495e:	d10b      	bne.n	8004978 <_printf_i+0x14c>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	07de      	lsls	r6, r3, #31
 8004964:	d508      	bpl.n	8004978 <_printf_i+0x14c>
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	6861      	ldr	r1, [r4, #4]
 800496a:	4299      	cmp	r1, r3
 800496c:	bfde      	ittt	le
 800496e:	2330      	movle	r3, #48	; 0x30
 8004970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004978:	1b52      	subs	r2, r2, r5
 800497a:	6122      	str	r2, [r4, #16]
 800497c:	f8cd a000 	str.w	sl, [sp]
 8004980:	464b      	mov	r3, r9
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff fee2 	bl	8004750 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14c      	bne.n	8004a2a <_printf_i+0x1fe>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b004      	add	sp, #16
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	4835      	ldr	r0, [pc, #212]	; (8004a70 <_printf_i+0x244>)
 800499c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a0:	6829      	ldr	r1, [r5, #0]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049a8:	6029      	str	r1, [r5, #0]
 80049aa:	061d      	lsls	r5, r3, #24
 80049ac:	d514      	bpl.n	80049d8 <_printf_i+0x1ac>
 80049ae:	07df      	lsls	r7, r3, #31
 80049b0:	bf44      	itt	mi
 80049b2:	f043 0320 	orrmi.w	r3, r3, #32
 80049b6:	6023      	strmi	r3, [r4, #0]
 80049b8:	b91e      	cbnz	r6, 80049c2 <_printf_i+0x196>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f023 0320 	bic.w	r3, r3, #32
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	2310      	movs	r3, #16
 80049c4:	e7b0      	b.n	8004928 <_printf_i+0xfc>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f043 0320 	orr.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	2378      	movs	r3, #120	; 0x78
 80049d0:	4828      	ldr	r0, [pc, #160]	; (8004a74 <_printf_i+0x248>)
 80049d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d6:	e7e3      	b.n	80049a0 <_printf_i+0x174>
 80049d8:	0659      	lsls	r1, r3, #25
 80049da:	bf48      	it	mi
 80049dc:	b2b6      	uxthmi	r6, r6
 80049de:	e7e6      	b.n	80049ae <_printf_i+0x182>
 80049e0:	4615      	mov	r5, r2
 80049e2:	e7bb      	b.n	800495c <_printf_i+0x130>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6826      	ldr	r6, [r4, #0]
 80049e8:	6961      	ldr	r1, [r4, #20]
 80049ea:	1d18      	adds	r0, r3, #4
 80049ec:	6028      	str	r0, [r5, #0]
 80049ee:	0635      	lsls	r5, r6, #24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0x1cc>
 80049f4:	6019      	str	r1, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0x1d2>
 80049f8:	0670      	lsls	r0, r6, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0x1c8>
 80049fc:	8019      	strh	r1, [r3, #0]
 80049fe:	2300      	movs	r3, #0
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	4615      	mov	r5, r2
 8004a04:	e7ba      	b.n	800497c <_printf_i+0x150>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	602a      	str	r2, [r5, #0]
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	2100      	movs	r1, #0
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fb fbdc 	bl	80001d0 <memchr>
 8004a18:	b108      	cbz	r0, 8004a1e <_printf_i+0x1f2>
 8004a1a:	1b40      	subs	r0, r0, r5
 8004a1c:	6060      	str	r0, [r4, #4]
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	2300      	movs	r3, #0
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	e7a8      	b.n	800497c <_printf_i+0x150>
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4640      	mov	r0, r8
 8004a32:	47d0      	blx	sl
 8004a34:	3001      	adds	r0, #1
 8004a36:	d0ab      	beq.n	8004990 <_printf_i+0x164>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	079b      	lsls	r3, r3, #30
 8004a3c:	d413      	bmi.n	8004a66 <_printf_i+0x23a>
 8004a3e:	68e0      	ldr	r0, [r4, #12]
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	4298      	cmp	r0, r3
 8004a44:	bfb8      	it	lt
 8004a46:	4618      	movlt	r0, r3
 8004a48:	e7a4      	b.n	8004994 <_printf_i+0x168>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	47d0      	blx	sl
 8004a54:	3001      	adds	r0, #1
 8004a56:	d09b      	beq.n	8004990 <_printf_i+0x164>
 8004a58:	3501      	adds	r5, #1
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	9903      	ldr	r1, [sp, #12]
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	42ab      	cmp	r3, r5
 8004a62:	dcf2      	bgt.n	8004a4a <_printf_i+0x21e>
 8004a64:	e7eb      	b.n	8004a3e <_printf_i+0x212>
 8004a66:	2500      	movs	r5, #0
 8004a68:	f104 0619 	add.w	r6, r4, #25
 8004a6c:	e7f5      	b.n	8004a5a <_printf_i+0x22e>
 8004a6e:	bf00      	nop
 8004a70:	08005b65 	.word	0x08005b65
 8004a74:	08005b76 	.word	0x08005b76

08004a78 <memcpy>:
 8004a78:	440a      	add	r2, r1
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a80:	d100      	bne.n	8004a84 <memcpy+0xc>
 8004a82:	4770      	bx	lr
 8004a84:	b510      	push	{r4, lr}
 8004a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a8e:	4291      	cmp	r1, r2
 8004a90:	d1f9      	bne.n	8004a86 <memcpy+0xe>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <memmove>:
 8004a94:	4288      	cmp	r0, r1
 8004a96:	b510      	push	{r4, lr}
 8004a98:	eb01 0402 	add.w	r4, r1, r2
 8004a9c:	d902      	bls.n	8004aa4 <memmove+0x10>
 8004a9e:	4284      	cmp	r4, r0
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	d807      	bhi.n	8004ab4 <memmove+0x20>
 8004aa4:	1e43      	subs	r3, r0, #1
 8004aa6:	42a1      	cmp	r1, r4
 8004aa8:	d008      	beq.n	8004abc <memmove+0x28>
 8004aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab2:	e7f8      	b.n	8004aa6 <memmove+0x12>
 8004ab4:	4402      	add	r2, r0
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	428a      	cmp	r2, r1
 8004aba:	d100      	bne.n	8004abe <memmove+0x2a>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ac6:	e7f7      	b.n	8004ab8 <memmove+0x24>

08004ac8 <_free_r>:
 8004ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aca:	2900      	cmp	r1, #0
 8004acc:	d044      	beq.n	8004b58 <_free_r+0x90>
 8004ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad2:	9001      	str	r0, [sp, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8004ada:	bfb8      	it	lt
 8004adc:	18e4      	addlt	r4, r4, r3
 8004ade:	f000 f913 	bl	8004d08 <__malloc_lock>
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <_free_r+0x94>)
 8004ae4:	9801      	ldr	r0, [sp, #4]
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	b933      	cbnz	r3, 8004af8 <_free_r+0x30>
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	6014      	str	r4, [r2, #0]
 8004aee:	b003      	add	sp, #12
 8004af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af4:	f000 b90e 	b.w	8004d14 <__malloc_unlock>
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d908      	bls.n	8004b0e <_free_r+0x46>
 8004afc:	6825      	ldr	r5, [r4, #0]
 8004afe:	1961      	adds	r1, r4, r5
 8004b00:	428b      	cmp	r3, r1
 8004b02:	bf01      	itttt	eq
 8004b04:	6819      	ldreq	r1, [r3, #0]
 8004b06:	685b      	ldreq	r3, [r3, #4]
 8004b08:	1949      	addeq	r1, r1, r5
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	e7ed      	b.n	8004aea <_free_r+0x22>
 8004b0e:	461a      	mov	r2, r3
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b10b      	cbz	r3, 8004b18 <_free_r+0x50>
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d9fa      	bls.n	8004b0e <_free_r+0x46>
 8004b18:	6811      	ldr	r1, [r2, #0]
 8004b1a:	1855      	adds	r5, r2, r1
 8004b1c:	42a5      	cmp	r5, r4
 8004b1e:	d10b      	bne.n	8004b38 <_free_r+0x70>
 8004b20:	6824      	ldr	r4, [r4, #0]
 8004b22:	4421      	add	r1, r4
 8004b24:	1854      	adds	r4, r2, r1
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	d1e0      	bne.n	8004aee <_free_r+0x26>
 8004b2c:	681c      	ldr	r4, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	6053      	str	r3, [r2, #4]
 8004b32:	4421      	add	r1, r4
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	e7da      	b.n	8004aee <_free_r+0x26>
 8004b38:	d902      	bls.n	8004b40 <_free_r+0x78>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	6003      	str	r3, [r0, #0]
 8004b3e:	e7d6      	b.n	8004aee <_free_r+0x26>
 8004b40:	6825      	ldr	r5, [r4, #0]
 8004b42:	1961      	adds	r1, r4, r5
 8004b44:	428b      	cmp	r3, r1
 8004b46:	bf04      	itt	eq
 8004b48:	6819      	ldreq	r1, [r3, #0]
 8004b4a:	685b      	ldreq	r3, [r3, #4]
 8004b4c:	6063      	str	r3, [r4, #4]
 8004b4e:	bf04      	itt	eq
 8004b50:	1949      	addeq	r1, r1, r5
 8004b52:	6021      	streq	r1, [r4, #0]
 8004b54:	6054      	str	r4, [r2, #4]
 8004b56:	e7ca      	b.n	8004aee <_free_r+0x26>
 8004b58:	b003      	add	sp, #12
 8004b5a:	bd30      	pop	{r4, r5, pc}
 8004b5c:	20000588 	.word	0x20000588

08004b60 <sbrk_aligned>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4e0e      	ldr	r6, [pc, #56]	; (8004b9c <sbrk_aligned+0x3c>)
 8004b64:	460c      	mov	r4, r1
 8004b66:	6831      	ldr	r1, [r6, #0]
 8004b68:	4605      	mov	r5, r0
 8004b6a:	b911      	cbnz	r1, 8004b72 <sbrk_aligned+0x12>
 8004b6c:	f000 f8bc 	bl	8004ce8 <_sbrk_r>
 8004b70:	6030      	str	r0, [r6, #0]
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 f8b7 	bl	8004ce8 <_sbrk_r>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	d00a      	beq.n	8004b94 <sbrk_aligned+0x34>
 8004b7e:	1cc4      	adds	r4, r0, #3
 8004b80:	f024 0403 	bic.w	r4, r4, #3
 8004b84:	42a0      	cmp	r0, r4
 8004b86:	d007      	beq.n	8004b98 <sbrk_aligned+0x38>
 8004b88:	1a21      	subs	r1, r4, r0
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f8ac 	bl	8004ce8 <_sbrk_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d101      	bne.n	8004b98 <sbrk_aligned+0x38>
 8004b94:	f04f 34ff 	mov.w	r4, #4294967295
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	2000058c 	.word	0x2000058c

08004ba0 <_malloc_r>:
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	1ccd      	adds	r5, r1, #3
 8004ba6:	f025 0503 	bic.w	r5, r5, #3
 8004baa:	3508      	adds	r5, #8
 8004bac:	2d0c      	cmp	r5, #12
 8004bae:	bf38      	it	cc
 8004bb0:	250c      	movcc	r5, #12
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	db01      	blt.n	8004bbc <_malloc_r+0x1c>
 8004bb8:	42a9      	cmp	r1, r5
 8004bba:	d905      	bls.n	8004bc8 <_malloc_r+0x28>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc8:	4e2e      	ldr	r6, [pc, #184]	; (8004c84 <_malloc_r+0xe4>)
 8004bca:	f000 f89d 	bl	8004d08 <__malloc_lock>
 8004bce:	6833      	ldr	r3, [r6, #0]
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	bb34      	cbnz	r4, 8004c22 <_malloc_r+0x82>
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7ff ffc2 	bl	8004b60 <sbrk_aligned>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	4604      	mov	r4, r0
 8004be0:	d14d      	bne.n	8004c7e <_malloc_r+0xde>
 8004be2:	6834      	ldr	r4, [r6, #0]
 8004be4:	4626      	mov	r6, r4
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	d140      	bne.n	8004c6c <_malloc_r+0xcc>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4631      	mov	r1, r6
 8004bee:	4638      	mov	r0, r7
 8004bf0:	eb04 0803 	add.w	r8, r4, r3
 8004bf4:	f000 f878 	bl	8004ce8 <_sbrk_r>
 8004bf8:	4580      	cmp	r8, r0
 8004bfa:	d13a      	bne.n	8004c72 <_malloc_r+0xd2>
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	3503      	adds	r5, #3
 8004c00:	1a6d      	subs	r5, r5, r1
 8004c02:	f025 0503 	bic.w	r5, r5, #3
 8004c06:	3508      	adds	r5, #8
 8004c08:	2d0c      	cmp	r5, #12
 8004c0a:	bf38      	it	cc
 8004c0c:	250c      	movcc	r5, #12
 8004c0e:	4629      	mov	r1, r5
 8004c10:	4638      	mov	r0, r7
 8004c12:	f7ff ffa5 	bl	8004b60 <sbrk_aligned>
 8004c16:	3001      	adds	r0, #1
 8004c18:	d02b      	beq.n	8004c72 <_malloc_r+0xd2>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	442b      	add	r3, r5
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	e00e      	b.n	8004c40 <_malloc_r+0xa0>
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	1b52      	subs	r2, r2, r5
 8004c26:	d41e      	bmi.n	8004c66 <_malloc_r+0xc6>
 8004c28:	2a0b      	cmp	r2, #11
 8004c2a:	d916      	bls.n	8004c5a <_malloc_r+0xba>
 8004c2c:	1961      	adds	r1, r4, r5
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	6025      	str	r5, [r4, #0]
 8004c32:	bf18      	it	ne
 8004c34:	6059      	strne	r1, [r3, #4]
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	bf08      	it	eq
 8004c3a:	6031      	streq	r1, [r6, #0]
 8004c3c:	5162      	str	r2, [r4, r5]
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	4638      	mov	r0, r7
 8004c42:	f104 060b 	add.w	r6, r4, #11
 8004c46:	f000 f865 	bl	8004d14 <__malloc_unlock>
 8004c4a:	f026 0607 	bic.w	r6, r6, #7
 8004c4e:	1d23      	adds	r3, r4, #4
 8004c50:	1af2      	subs	r2, r6, r3
 8004c52:	d0b6      	beq.n	8004bc2 <_malloc_r+0x22>
 8004c54:	1b9b      	subs	r3, r3, r6
 8004c56:	50a3      	str	r3, [r4, r2]
 8004c58:	e7b3      	b.n	8004bc2 <_malloc_r+0x22>
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	bf0c      	ite	eq
 8004c60:	6032      	streq	r2, [r6, #0]
 8004c62:	605a      	strne	r2, [r3, #4]
 8004c64:	e7ec      	b.n	8004c40 <_malloc_r+0xa0>
 8004c66:	4623      	mov	r3, r4
 8004c68:	6864      	ldr	r4, [r4, #4]
 8004c6a:	e7b2      	b.n	8004bd2 <_malloc_r+0x32>
 8004c6c:	4634      	mov	r4, r6
 8004c6e:	6876      	ldr	r6, [r6, #4]
 8004c70:	e7b9      	b.n	8004be6 <_malloc_r+0x46>
 8004c72:	230c      	movs	r3, #12
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4638      	mov	r0, r7
 8004c78:	f000 f84c 	bl	8004d14 <__malloc_unlock>
 8004c7c:	e7a1      	b.n	8004bc2 <_malloc_r+0x22>
 8004c7e:	6025      	str	r5, [r4, #0]
 8004c80:	e7de      	b.n	8004c40 <_malloc_r+0xa0>
 8004c82:	bf00      	nop
 8004c84:	20000588 	.word	0x20000588

08004c88 <_realloc_r>:
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4614      	mov	r4, r2
 8004c90:	460e      	mov	r6, r1
 8004c92:	b921      	cbnz	r1, 8004c9e <_realloc_r+0x16>
 8004c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c98:	4611      	mov	r1, r2
 8004c9a:	f7ff bf81 	b.w	8004ba0 <_malloc_r>
 8004c9e:	b92a      	cbnz	r2, 8004cac <_realloc_r+0x24>
 8004ca0:	f7ff ff12 	bl	8004ac8 <_free_r>
 8004ca4:	4625      	mov	r5, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cac:	f000 f838 	bl	8004d20 <_malloc_usable_size_r>
 8004cb0:	4284      	cmp	r4, r0
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	d802      	bhi.n	8004cbc <_realloc_r+0x34>
 8004cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cba:	d812      	bhi.n	8004ce2 <_realloc_r+0x5a>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f7ff ff6e 	bl	8004ba0 <_malloc_r>
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d0ed      	beq.n	8004ca6 <_realloc_r+0x1e>
 8004cca:	42bc      	cmp	r4, r7
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4631      	mov	r1, r6
 8004cd0:	bf28      	it	cs
 8004cd2:	463a      	movcs	r2, r7
 8004cd4:	f7ff fed0 	bl	8004a78 <memcpy>
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4640      	mov	r0, r8
 8004cdc:	f7ff fef4 	bl	8004ac8 <_free_r>
 8004ce0:	e7e1      	b.n	8004ca6 <_realloc_r+0x1e>
 8004ce2:	4635      	mov	r5, r6
 8004ce4:	e7df      	b.n	8004ca6 <_realloc_r+0x1e>
	...

08004ce8 <_sbrk_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d06      	ldr	r5, [pc, #24]	; (8004d04 <_sbrk_r+0x1c>)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4604      	mov	r4, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	f7fd f8a0 	bl	8001e38 <_sbrk>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d102      	bne.n	8004d02 <_sbrk_r+0x1a>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	b103      	cbz	r3, 8004d02 <_sbrk_r+0x1a>
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	20000590 	.word	0x20000590

08004d08 <__malloc_lock>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__malloc_lock+0x8>)
 8004d0a:	f000 b811 	b.w	8004d30 <__retarget_lock_acquire_recursive>
 8004d0e:	bf00      	nop
 8004d10:	20000594 	.word	0x20000594

08004d14 <__malloc_unlock>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__malloc_unlock+0x8>)
 8004d16:	f000 b80c 	b.w	8004d32 <__retarget_lock_release_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20000594 	.word	0x20000594

08004d20 <_malloc_usable_size_r>:
 8004d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d24:	1f18      	subs	r0, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfbc      	itt	lt
 8004d2a:	580b      	ldrlt	r3, [r1, r0]
 8004d2c:	18c0      	addlt	r0, r0, r3
 8004d2e:	4770      	bx	lr

08004d30 <__retarget_lock_acquire_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <__retarget_lock_release_recursive>:
 8004d32:	4770      	bx	lr

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
